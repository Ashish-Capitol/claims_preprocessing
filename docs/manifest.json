{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2022-11-16T21:49:26.717390Z", "invocation_id": "0c070994-1bbf-45e0-889b-f82c6fd44aca", "env": {}, "project_id": "332be3ad2863ca12e5a289c820101a0a", "user_id": "d02c3f60-e907-499f-9156-e733dd252349", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.claims_preprocessing.claims_preprocessing__prescription": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.pharmacy_claim"]}, "config": {"enabled": true, "alias": "prescription", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__prescription"], "unique_id": "model.claims_preprocessing.claims_preprocessing__prescription", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      Noveber 2022\n-- Purpose      Medication list\n-- Notes\n-------------------------------------------------------------------------------\n-- Modification History\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nselect\n    cast(claim_id as varchar) as claim_id\n    , cast(claim_line_number as varchar) as claim_line_number\n    , cast(patient_id as varchar) as patient_id\n    , cast(member_id as varchar) as member_id\n    , cast(prescribing_provider_npi as varchar) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as varchar) as dispensing_provider_npi\n    , cast(dispensing_date as varchar) as dispensing_date\n    , cast(ndc_code as varchar) as ndc_code\n    , cast(null as varchar) as ndc_description\n    , cast(quantity as varchar) as quantity\n    , cast(days_supply as varchar) as days_supply\n    , cast(refills as varchar) as refills\n    , cast(paid_date as varchar) as paid_date\n    , cast(paid_amount as varchar) as paid_amount\n    , cast(allowed_amount as varchar) as allowed_amount\n    , cast(data_source as varchar) as data_source\nfrom {{ var('pharmacy_claim')}} m", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__prescription.sql", "original_file_path": "models/claims_preprocessing__prescription.sql", "name": "claims_preprocessing__prescription", "alias": "prescription", "checksum": {"name": "sha256", "checksum": "63452ea19e68c0253052ffcc80e0df7ea3198a35d95da290a3292134752e7927"}, "tags": ["claims_preprocessing"], "refs": [], "sources": [["claims_input", "pharmacy_claim"]], "metrics": [], "description": "Medicaions from claims", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__prescription.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "prescription", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2505472, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      Noveber 2022\n-- Purpose      Medication list\n-- Notes\n-------------------------------------------------------------------------------\n-- Modification History\n-------------------------------------------------------------------------------\n\n\nselect\n    cast(claim_id as varchar) as claim_id\n    , cast(claim_line_number as varchar) as claim_line_number\n    , cast(patient_id as varchar) as patient_id\n    , cast(member_id as varchar) as member_id\n    , cast(prescribing_provider_npi as varchar) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as varchar) as dispensing_provider_npi\n    , cast(dispensing_date as varchar) as dispensing_date\n    , cast(ndc_code as varchar) as ndc_code\n    , cast(null as varchar) as ndc_description\n    , cast(quantity as varchar) as quantity\n    , cast(days_supply as varchar) as days_supply\n    , cast(refills as varchar) as refills\n    , cast(paid_date as varchar) as paid_date\n    , cast(paid_amount as varchar) as paid_amount\n    , cast(allowed_amount as varchar) as allowed_amount\n    , cast(data_source as varchar) as data_source\nfrom tuva.claims_input.pharmacy_claim m", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.prescription"}, "model.claims_preprocessing.claims_preprocessing__procedure": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "seed.terminology.terminology__icd_10_pcs"]}, "config": {"enabled": true, "alias": "procedure", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__procedure"], "unique_id": "model.claims_preprocessing.claims_preprocessing__procedure", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate procedures code and dates.\n-- Notes        Using encounter provider since merged claims will have two providers resulting in duplicated procedures.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\n\nwith procedure_code as(\n  select\n\tencounter_id\n\t,claim_id\n\t,patient_id\n\t,procedure_code_type as code_type\n\t,code\n\t,cast(replace(procedure,'PROCEDURE_CODE_','') as int) as procedure_sequence\n  ,billing_npi as practioner_npi\n  ,data_source\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}}\n  unpivot(\n    code for procedure in (procedure_code_1\n\t\t\t\t\t\t\t,procedure_code_2\n\t\t\t\t\t\t\t,procedure_code_3\n\t\t\t\t\t\t\t,procedure_code_4\n\t\t\t\t\t\t\t,procedure_code_5\n\t\t\t\t\t\t\t,procedure_code_6\n\t\t\t\t\t\t\t,procedure_code_7\n\t\t\t\t\t\t\t,procedure_code_8\n\t\t\t\t\t\t\t,procedure_code_9\n\t\t\t\t\t\t\t,procedure_code_10\n\t\t\t\t\t\t\t,procedure_code_11\n\t\t\t\t\t\t\t,procedure_code_12\n\t\t\t\t\t\t\t,procedure_code_13\n\t\t\t\t\t\t\t,procedure_code_14\n\t\t\t\t\t\t\t,procedure_code_15\n\t\t\t\t\t\t\t,procedure_code_16\n\t\t\t\t\t\t\t,procedure_code_17\n\t\t\t\t\t\t\t,procedure_code_18\n\t\t\t\t\t\t\t,procedure_code_19\n\t\t\t\t\t\t\t,procedure_code_20\n\t\t\t\t\t\t\t,procedure_code_21\n\t\t\t\t\t\t\t,procedure_code_22\n\t\t\t\t\t\t\t,procedure_code_23\n\t\t\t\t\t\t\t,procedure_code_24\n\t\t\t\t\t\t\t,procedure_code_25)\n            )pdx\n)\n, procedure_date as(\n  select \n    claim_id\n    ,procedure_date\n    ,cast(replace(procedure,'PROCEDURE_DATE_','') as int) as procedure_sequence\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}}\n  unpivot(\n    procedure_date for procedure in (procedure_date_1\n                                            ,procedure_date_2\n                                            ,procedure_date_3\n                                            ,procedure_date_4\n                                            ,procedure_date_5\n                                            ,procedure_date_6\n                                            ,procedure_date_7\n                                            ,procedure_date_8\n                                            ,procedure_date_9\n                                            ,procedure_date_10\n                                            ,procedure_date_11\n                                            ,procedure_date_12\n                                            ,procedure_date_13\n                                            ,procedure_date_14\n                                            ,procedure_date_15\n                                            ,procedure_date_16\n                                            ,procedure_date_17\n                                            ,procedure_date_18\n                                            ,procedure_date_19\n                                            ,procedure_date_20\n                                            ,procedure_date_21\n                                            ,procedure_date_22\n                                            ,procedure_date_23\n                                            ,procedure_date_24\n                                            ,procedure_date_25)\n            )ppoa\n)\nselect distinct \n\tcast(c.encounter_id as varchar) as encounter_id\n\t,cast(c.patient_id as varchar) as patient_id\n\t,cast(d.procedure_date as date) as procedure_date\n\t,cast(c.code_type as varchar) as code_type\n\t,cast(c.code as varchar) as code\n\t,cast(px.short_description as varchar) as description\n\t,cast(c.practioner_npi as varchar) as practioner_npi\n\t,cast(c.data_source as varchar) as data_source\nfrom procedure_code c\nleft join procedure_date d\n  ON c.claim_id = d.claim_id\n  AND c.procedure_sequence = d.procedure_sequence\nleft join {{ ref('terminology__icd_10_pcs')}} px\n  on c.code = icd_10_pcs\n  and c.code_type = 0", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__procedure.sql", "original_file_path": "models/claims_preprocessing__procedure.sql", "name": "claims_preprocessing__procedure", "alias": "procedure", "checksum": {"name": "sha256", "checksum": "b7029d667d29f69d97dc3adc4e6b07bc20f2768c039889a3a57d603ec33c02d9"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_claim_line_stage"], ["claims_preprocessing__encounter_claim_line_stage"], ["terminology__icd_10_pcs"]], "sources": [], "metrics": [], "description": "Procedure list", "columns": {"patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "procedure", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2570348, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate procedures code and dates.\n-- Notes        Using encounter provider since merged claims will have two providers resulting in duplicated procedures.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\n\nwith procedure_code as(\n  select\n\tencounter_id\n\t,claim_id\n\t,patient_id\n\t,procedure_code_type as code_type\n\t,code\n\t,cast(replace(procedure,'PROCEDURE_CODE_','') as int) as procedure_sequence\n  ,billing_npi as practioner_npi\n  ,data_source\n  from tuva.core.encounter_claim_line_stage\n  unpivot(\n    code for procedure in (procedure_code_1\n\t\t\t\t\t\t\t,procedure_code_2\n\t\t\t\t\t\t\t,procedure_code_3\n\t\t\t\t\t\t\t,procedure_code_4\n\t\t\t\t\t\t\t,procedure_code_5\n\t\t\t\t\t\t\t,procedure_code_6\n\t\t\t\t\t\t\t,procedure_code_7\n\t\t\t\t\t\t\t,procedure_code_8\n\t\t\t\t\t\t\t,procedure_code_9\n\t\t\t\t\t\t\t,procedure_code_10\n\t\t\t\t\t\t\t,procedure_code_11\n\t\t\t\t\t\t\t,procedure_code_12\n\t\t\t\t\t\t\t,procedure_code_13\n\t\t\t\t\t\t\t,procedure_code_14\n\t\t\t\t\t\t\t,procedure_code_15\n\t\t\t\t\t\t\t,procedure_code_16\n\t\t\t\t\t\t\t,procedure_code_17\n\t\t\t\t\t\t\t,procedure_code_18\n\t\t\t\t\t\t\t,procedure_code_19\n\t\t\t\t\t\t\t,procedure_code_20\n\t\t\t\t\t\t\t,procedure_code_21\n\t\t\t\t\t\t\t,procedure_code_22\n\t\t\t\t\t\t\t,procedure_code_23\n\t\t\t\t\t\t\t,procedure_code_24\n\t\t\t\t\t\t\t,procedure_code_25)\n            )pdx\n)\n, procedure_date as(\n  select \n    claim_id\n    ,procedure_date\n    ,cast(replace(procedure,'PROCEDURE_DATE_','') as int) as procedure_sequence\n  from tuva.core.encounter_claim_line_stage\n  unpivot(\n    procedure_date for procedure in (procedure_date_1\n                                            ,procedure_date_2\n                                            ,procedure_date_3\n                                            ,procedure_date_4\n                                            ,procedure_date_5\n                                            ,procedure_date_6\n                                            ,procedure_date_7\n                                            ,procedure_date_8\n                                            ,procedure_date_9\n                                            ,procedure_date_10\n                                            ,procedure_date_11\n                                            ,procedure_date_12\n                                            ,procedure_date_13\n                                            ,procedure_date_14\n                                            ,procedure_date_15\n                                            ,procedure_date_16\n                                            ,procedure_date_17\n                                            ,procedure_date_18\n                                            ,procedure_date_19\n                                            ,procedure_date_20\n                                            ,procedure_date_21\n                                            ,procedure_date_22\n                                            ,procedure_date_23\n                                            ,procedure_date_24\n                                            ,procedure_date_25)\n            )ppoa\n)\nselect distinct \n\tcast(c.encounter_id as varchar) as encounter_id\n\t,cast(c.patient_id as varchar) as patient_id\n\t,cast(d.procedure_date as date) as procedure_date\n\t,cast(c.code_type as varchar) as code_type\n\t,cast(c.code as varchar) as code\n\t,cast(px.short_description as varchar) as description\n\t,cast(c.practioner_npi as varchar) as practioner_npi\n\t,cast(c.data_source as varchar) as data_source\nfrom procedure_code c\nleft join procedure_date d\n  ON c.claim_id = d.claim_id\n  AND c.procedure_sequence = d.procedure_sequence\nleft join tuva.terminology.icd_10_pcs px\n  on c.code = icd_10_pcs\n  and c.code_type = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.procedure"}, "model.claims_preprocessing.claims_preprocessing__patient": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.eligibility"]}, "config": {"enabled": true, "alias": "patient", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__patient"], "unique_id": "model.claims_preprocessing.claims_preprocessing__patient", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      List of patients and demographics.\n-- Notes        Need row number to select most recent demographic information for a patient.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (partition by patient_id order by enrollment_end_date DESC) as row_sequence\n    from {{ var('eligibility')}}\n)\n\nselect\n    cast(patient_id as varchar) as patient_id\n    ,cast(gender as varchar) as gender\n    ,cast(race as varchar) as race\n    ,cast(birth_date as date) as birth_date\n    ,cast(death_date as date) as death_date\n    ,cast(death_flag as int) as death_flag\n    ,cast(first_name as varchar) as first_name\n    ,cast(last_name as varchar) as last_name\n    ,cast(address as varchar) as address\n    ,cast(city as varchar) as city\n    ,cast(state as varchar) as state\n    ,cast(zip_code as varchar) as zip_code\n    ,cast(phone as varchar) as phone\n    ,cast(data_source as varchar) as data_source\nfrom patient_stage\nwhere row_sequence = 1", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__patient.sql", "original_file_path": "models/claims_preprocessing__patient.sql", "name": "claims_preprocessing__patient", "alias": "patient", "checksum": {"name": "sha256", "checksum": "afd7364d93a049e4e33fe78f89e320eb1b85b98efd99c72a6de0fcd8317ce768"}, "tags": ["claims_preprocessing"], "refs": [], "sources": [["claims_input", "eligibility"]], "metrics": [], "description": "Unique list of patients and demographics", "columns": {"patient_id": {"name": "patient_id", "description": "Member unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Member gender", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Member date of birth", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race": {"name": "race", "description": "Member race", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "Member zip code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "Member state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deceased_flag": {"name": "deceased_flag", "description": "Flag indicating member is deceased", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Member date of death", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "patient", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.244762, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      List of patients and demographics.\n-- Notes        Need row number to select most recent demographic information for a patient.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (partition by patient_id order by enrollment_end_date DESC) as row_sequence\n    from tuva.claims_input.eligibility\n)\n\nselect\n    cast(patient_id as varchar) as patient_id\n    ,cast(gender as varchar) as gender\n    ,cast(race as varchar) as race\n    ,cast(birth_date as date) as birth_date\n    ,cast(death_date as date) as death_date\n    ,cast(death_flag as int) as death_flag\n    ,cast(first_name as varchar) as first_name\n    ,cast(last_name as varchar) as last_name\n    ,cast(address as varchar) as address\n    ,cast(city as varchar) as city\n    ,cast(state as varchar) as state\n    ,cast(zip_code as varchar) as zip_code\n    ,cast(phone as varchar) as phone\n    ,cast(data_source as varchar) as data_source\nfrom patient_stage\nwhere row_sequence = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.patient"}, "model.claims_preprocessing.claims_preprocessing__encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage", "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"]}, "config": {"enabled": true, "alias": "encounter", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__encounter"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details with insitutional data elements taking priority.\n-------------------------------------------------------------------------------\n-- Modification History\n-- TXV 07/2022  Resolving bug that was omitting inst elemts (discharge disp, admit type)\n--              due to prof claim link and logic.\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nselect distinct\n  coalesce(i.encounter_id, p.encounter_id) as encounter_id\n  ,coalesce(i.patient_id, p.patient_id) as patient_id\n  ,coalesce(i.encounter_type, p.encounter_type) as encounter_type\n  ,coalesce(i.encounter_start_date, p.encounter_start_date) as encounter_start_date\n  ,coalesce(i.encounter_end_date, p.encounter_end_date) as encounter_end_date\n  ,coalesce(i.admission_date, p.admission_date) as admission_date\n  ,coalesce(i.discharge_date, p.discharge_date) as discharge_date\n  ,coalesce(i.admit_source_code, p.admit_source_code) as admit_source_code\n  ,coalesce(i.admit_source_description, p.admit_source_description) as admit_source_description\n  ,coalesce(i.admit_type_code, p.admit_type_code) as admit_type_code\n  ,coalesce(i.admit_type_description, p.admit_type_description) as admit_type_description\n  ,coalesce(i.discharge_disposition_code, p.discharge_disposition_code) as discharge_disposition_code\n  ,coalesce(i.discharge_disposition_description, p.discharge_disposition_description) as discharge_disposition_description\n  ,coalesce(i.rendering_npi, p.rendering_npi) as rendering_npi\n  ,coalesce(i.billing_npi, p.billing_npi) as billing_npi\n  ,coalesce(i.facility_npi, p.facility_npi) as facility_npi\n  ,coalesce(i.facility_name, p.facility_name) as facility_name\n  ,coalesce(i.ms_drg_code, p.ms_drg_code) as ms_drg_code\n  ,coalesce(i.ms_drg_description, p.ms_drg_description) as ms_drg_description\n  ,coalesce(i.paid_date, p.paid_date) as paid_date\n  ,coalesce(i.paid_amount, p.paid_amount) as paid_amount\n  ,coalesce(i.allowed_amount, p.allowed_amount) as allowed_amount\n  ,coalesce(i.charge_amount, p.charge_amount) as charge_amount\n  ,coalesce(i.data_source, p.data_source) as data_source\nfrom {{ ref('claims_preprocessing__encounter_inst_stage')}} i\nfull outer join {{ ref('claims_preprocessing__encounter_prof_stage')}} p\n  on i.encounter_id = p.encounter_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__encounter.sql", "original_file_path": "models/claims_preprocessing__encounter.sql", "name": "claims_preprocessing__encounter", "alias": "encounter", "checksum": {"name": "sha256", "checksum": "664353fde1599e9506e8f0f3b11d4da879b0c149a5cf293ffa1095c1a6a4d494"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_inst_stage"], ["claims_preprocessing__encounter_prof_stage"]], "sources": [], "metrics": [], "description": "Encounter details", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2274365, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details with insitutional data elements taking priority.\n-------------------------------------------------------------------------------\n-- Modification History\n-- TXV 07/2022  Resolving bug that was omitting inst elemts (discharge disp, admit type)\n--              due to prof claim link and logic.\n-------------------------------------------------------------------------------\n\n\nselect distinct\n  coalesce(i.encounter_id, p.encounter_id) as encounter_id\n  ,coalesce(i.patient_id, p.patient_id) as patient_id\n  ,coalesce(i.encounter_type, p.encounter_type) as encounter_type\n  ,coalesce(i.encounter_start_date, p.encounter_start_date) as encounter_start_date\n  ,coalesce(i.encounter_end_date, p.encounter_end_date) as encounter_end_date\n  ,coalesce(i.admission_date, p.admission_date) as admission_date\n  ,coalesce(i.discharge_date, p.discharge_date) as discharge_date\n  ,coalesce(i.admit_source_code, p.admit_source_code) as admit_source_code\n  ,coalesce(i.admit_source_description, p.admit_source_description) as admit_source_description\n  ,coalesce(i.admit_type_code, p.admit_type_code) as admit_type_code\n  ,coalesce(i.admit_type_description, p.admit_type_description) as admit_type_description\n  ,coalesce(i.discharge_disposition_code, p.discharge_disposition_code) as discharge_disposition_code\n  ,coalesce(i.discharge_disposition_description, p.discharge_disposition_description) as discharge_disposition_description\n  ,coalesce(i.rendering_npi, p.rendering_npi) as rendering_npi\n  ,coalesce(i.billing_npi, p.billing_npi) as billing_npi\n  ,coalesce(i.facility_npi, p.facility_npi) as facility_npi\n  ,coalesce(i.facility_name, p.facility_name) as facility_name\n  ,coalesce(i.ms_drg_code, p.ms_drg_code) as ms_drg_code\n  ,coalesce(i.ms_drg_description, p.ms_drg_description) as ms_drg_description\n  ,coalesce(i.paid_date, p.paid_date) as paid_date\n  ,coalesce(i.paid_amount, p.paid_amount) as paid_amount\n  ,coalesce(i.allowed_amount, p.allowed_amount) as allowed_amount\n  ,coalesce(i.charge_amount, p.charge_amount) as charge_amount\n  ,coalesce(i.data_source, p.data_source) as data_source\nfrom tuva.core.encounter_inst_stage i\nfull outer join tuva.core.encounter_prof_stage p\n  on i.encounter_id = p.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter"}, "model.claims_preprocessing.claims_preprocessing__encounter_claim_line": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"]}, "config": {"enabled": true, "alias": "encounter_claim_line", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__encounter_claim_line"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_claim_line", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate medical claim line level detail.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 11/01/2022 Thu Xuan Vu\n--    Updated table/model name to encounter_claim_line\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nselect \n  cast(encounter_id as varchar) as encounter_id\n  ,cast(encounter_type as varchar) as encounter_type\n  ,cast(patient_id as varchar) as patient_id\n  ,cast(member_id as varchar) as member_id\n  ,cast(claim_id as varchar) as claim_id\n  ,cast(claim_line_number as int) as claim_line_number\n  ,cast(claim_type as varchar) as claim_type\n  ,cast(claim_start_date as date) as claim_start_date\n  ,cast(claim_end_date as date) as claim_end_date\n  ,cast(claim_line_start_date as date) as claim_line_start_date\n  ,cast(claim_line_end_date as date) as claim_line_end_date\n  ,cast(bill_type_code as varchar) as bill_type_code\n  ,cast(bill_type_description as varchar) as bill_type_description\n  ,cast(place_of_service_code as varchar) as place_of_service_code\n  ,cast(place_of_service_description as varchar) as place_of_service_description\n  ,cast(revenue_center_code as varchar) as revenue_center_code\n  ,cast(revenue_center_description as varchar) as revenue_center_description\n  ,cast(service_unit_quantity as int) as service_unit_quantity\n  ,cast(hcpcs_code as varchar) as hcpcs_code\n  ,cast(hcpcs_modifier_1 as varchar) as hcpcs_modifier_1\n  ,cast(hcpcs_modifier_2 as varchar) as hcpcs_modifier_2\n  ,cast(hcpcs_modifier_3 as varchar) as hcpcs_modifier_3\n  ,cast(hcpcs_modifier_4 as varchar) as hcpcs_modifier_4\n  ,cast(hcpcs_modifier_5 as varchar) as hcpcs_modifier_5\n  ,cast(rendering_npi as varchar) as rendering_npi\n  ,cast(billing_npi as varchar) as billing_npi\n  ,cast(facility_npi as varchar) as facility_npi\n  ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\n  ,cast(discharge_disposition_description as varchar) as discharge_disposition_description\n  ,cast(paid_date as date) as paid_date\n  ,cast(paid_amount as numeric(38,2)) as paid_amount\n  ,cast(allowed_amount as numeric(38,2)) as allowed_amount\n  ,cast(charge_amount as numeric(38,2)) as charge_amount\n  ,cast(data_source as varchar) as data_source\nfrom {{ ref('claims_preprocessing__encounter_claim_line_stage')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__encounter_claim_line.sql", "original_file_path": "models/claims_preprocessing__encounter_claim_line.sql", "name": "claims_preprocessing__encounter_claim_line", "alias": "encounter_claim_line", "checksum": {"name": "sha256", "checksum": "f1631f1bded9e227823222dce9a0004466bbdbdb6e6fe6a7f2a17dc98dca950f"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_claim_line_stage"]], "sources": [], "metrics": [], "description": "Claim line level detail", "columns": {"patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__encounter_claim_line.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_claim_line", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2342794, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate medical claim line level detail.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 11/01/2022 Thu Xuan Vu\n--    Updated table/model name to encounter_claim_line\n-------------------------------------------------------------------------------\n\n\nselect \n  cast(encounter_id as varchar) as encounter_id\n  ,cast(encounter_type as varchar) as encounter_type\n  ,cast(patient_id as varchar) as patient_id\n  ,cast(member_id as varchar) as member_id\n  ,cast(claim_id as varchar) as claim_id\n  ,cast(claim_line_number as int) as claim_line_number\n  ,cast(claim_type as varchar) as claim_type\n  ,cast(claim_start_date as date) as claim_start_date\n  ,cast(claim_end_date as date) as claim_end_date\n  ,cast(claim_line_start_date as date) as claim_line_start_date\n  ,cast(claim_line_end_date as date) as claim_line_end_date\n  ,cast(bill_type_code as varchar) as bill_type_code\n  ,cast(bill_type_description as varchar) as bill_type_description\n  ,cast(place_of_service_code as varchar) as place_of_service_code\n  ,cast(place_of_service_description as varchar) as place_of_service_description\n  ,cast(revenue_center_code as varchar) as revenue_center_code\n  ,cast(revenue_center_description as varchar) as revenue_center_description\n  ,cast(service_unit_quantity as int) as service_unit_quantity\n  ,cast(hcpcs_code as varchar) as hcpcs_code\n  ,cast(hcpcs_modifier_1 as varchar) as hcpcs_modifier_1\n  ,cast(hcpcs_modifier_2 as varchar) as hcpcs_modifier_2\n  ,cast(hcpcs_modifier_3 as varchar) as hcpcs_modifier_3\n  ,cast(hcpcs_modifier_4 as varchar) as hcpcs_modifier_4\n  ,cast(hcpcs_modifier_5 as varchar) as hcpcs_modifier_5\n  ,cast(rendering_npi as varchar) as rendering_npi\n  ,cast(billing_npi as varchar) as billing_npi\n  ,cast(facility_npi as varchar) as facility_npi\n  ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\n  ,cast(discharge_disposition_description as varchar) as discharge_disposition_description\n  ,cast(paid_date as date) as paid_date\n  ,cast(paid_amount as numeric(38,2)) as paid_amount\n  ,cast(allowed_amount as numeric(38,2)) as allowed_amount\n  ,cast(charge_amount as numeric(38,2)) as charge_amount\n  ,cast(data_source as varchar) as data_source\nfrom tuva.core.encounter_claim_line_stage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_claim_line"}, "model.claims_preprocessing.claims_preprocessing__condition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"]}, "config": {"enabled": true, "alias": "condition", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__condition"], "unique_id": "model.claims_preprocessing.claims_preprocessing__condition", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate diagnosis and present on admission for a patient using\n--                the claim sequence as diagnosis rank. \n-------------------------------------------------------------------------------\n-- Modification History\n-- 11/01/2022  Thu Xuan Vu\n--      Removed case statement to normalize dx code type.  Should be done at mapping.\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\n\nwith condition_code as(\n  select\n    encounter_id\n    ,claim_id\n    ,patient_id\n    ,claim_start_date as condition_date\n    ,diagnosis_code_type as code_type\n    ,code\n    ,cast(replace(diagnosis_rank,'DIAGNOSIS_CODE_') as int) as diagnosis_rank\n    ,data_source\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}}\n  unpivot(\n    code for diagnosis_rank in (diagnosis_code_1\n                                ,diagnosis_code_2\n                                ,diagnosis_code_3\n                                ,diagnosis_code_4\n                                ,diagnosis_code_5\n                                ,diagnosis_code_6\n                                ,diagnosis_code_7\n                                ,diagnosis_code_8\n                                ,diagnosis_code_9\n                                ,diagnosis_code_10\n                                ,diagnosis_code_11\n                                ,diagnosis_code_12\n                                ,diagnosis_code_13\n                                ,diagnosis_code_14\n                                ,diagnosis_code_15\n                                ,diagnosis_code_16\n                                ,diagnosis_code_17\n                                ,diagnosis_code_18\n                                ,diagnosis_code_19\n                                ,diagnosis_code_20\n                                ,diagnosis_code_21\n                                ,diagnosis_code_22\n                                ,diagnosis_code_23\n                                ,diagnosis_code_24\n                                ,diagnosis_code_25)\n            )pdx\n)\n, condition_poa as(\n  select \n    claim_id\n    ,present_on_admit_code\n    ,cast(replace(diagnosis_rank,'DIAGNOSIS_POA_') as int) as diagnosis_rank\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}}\n  unpivot(\n    present_on_admit_code for diagnosis_rank in (diagnosis_poa_1\n                                            ,diagnosis_poa_2\n                                            ,diagnosis_poa_3\n                                            ,diagnosis_poa_4\n                                            ,diagnosis_poa_5\n                                            ,diagnosis_poa_6\n                                            ,diagnosis_poa_7\n                                            ,diagnosis_poa_8\n                                            ,diagnosis_poa_9\n                                            ,diagnosis_poa_10\n                                            ,diagnosis_poa_11\n                                            ,diagnosis_poa_12\n                                            ,diagnosis_poa_13\n                                            ,diagnosis_poa_14\n                                            ,diagnosis_poa_15\n                                            ,diagnosis_poa_16\n                                            ,diagnosis_poa_17\n                                            ,diagnosis_poa_18\n                                            ,diagnosis_poa_19\n                                            ,diagnosis_poa_20\n                                            ,diagnosis_poa_21\n                                            ,diagnosis_poa_22\n                                            ,diagnosis_poa_23\n                                            ,diagnosis_poa_24\n                                            ,diagnosis_poa_25)\n            )ppoa\n)\nselect distinct\n  cast(c.encounter_id as varchar) as encounter_id\n  ,cast(c.patient_id as varchar) as patient_id\n  ,cast(c.condition_date as date) as condition_date\n  ,cast('discharge diagnosis' as varchar) as condition_type\n  ,cast(c.code_type as varchar) as code_type\n  ,cast(replace(c.code,'.','') as varchar) as code\n  ,cast(dx.short_description as varchar) as description\n  ,cast(c.diagnosis_rank as int) as diagnosis_rank\n  ,cast(p.present_on_admit_code as varchar) as present_on_admit_code\n  ,cast(poa.present_on_admit_description as varchar) as present_on_admit_description\n  ,cast(data_source as varchar) as data_source\nfrom condition_code c\nleft join condition_poa p\n  ON c.claim_id = p.claim_id\n  AND c.diagnosis_rank = p.diagnosis_rank\nleft join {{ ref('terminology__icd_10_cm')}} dx\n  on c.code = icd_10_cm\n  and c.code_type in ('icd-10-cm')\nleft join {{ ref ('terminology__present_on_admission')}} poa\n  on p.present_on_admit_code = poa.present_on_admit_code\nwhere code <> ''", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__condition.sql", "original_file_path": "models/claims_preprocessing__condition.sql", "name": "claims_preprocessing__condition", "alias": "condition", "checksum": {"name": "sha256", "checksum": "44325483fb46529525284d48f54e9da921f1bb49dba5e3befa1edde59942195d"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_claim_line_stage"], ["claims_preprocessing__encounter_claim_line_stage"], ["terminology__icd_10_cm"], ["terminology__present_on_admission"]], "sources": [], "metrics": [], "description": "Diagnosis list", "columns": {"patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__condition.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "condition", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2135887, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate diagnosis and present on admission for a patient using\n--                the claim sequence as diagnosis rank. \n-------------------------------------------------------------------------------\n-- Modification History\n-- 11/01/2022  Thu Xuan Vu\n--      Removed case statement to normalize dx code type.  Should be done at mapping.\n-------------------------------------------------------------------------------\n\n\n\nwith condition_code as(\n  select\n    encounter_id\n    ,claim_id\n    ,patient_id\n    ,claim_start_date as condition_date\n    ,diagnosis_code_type as code_type\n    ,code\n    ,cast(replace(diagnosis_rank,'DIAGNOSIS_CODE_') as int) as diagnosis_rank\n    ,data_source\n  from tuva.core.encounter_claim_line_stage\n  unpivot(\n    code for diagnosis_rank in (diagnosis_code_1\n                                ,diagnosis_code_2\n                                ,diagnosis_code_3\n                                ,diagnosis_code_4\n                                ,diagnosis_code_5\n                                ,diagnosis_code_6\n                                ,diagnosis_code_7\n                                ,diagnosis_code_8\n                                ,diagnosis_code_9\n                                ,diagnosis_code_10\n                                ,diagnosis_code_11\n                                ,diagnosis_code_12\n                                ,diagnosis_code_13\n                                ,diagnosis_code_14\n                                ,diagnosis_code_15\n                                ,diagnosis_code_16\n                                ,diagnosis_code_17\n                                ,diagnosis_code_18\n                                ,diagnosis_code_19\n                                ,diagnosis_code_20\n                                ,diagnosis_code_21\n                                ,diagnosis_code_22\n                                ,diagnosis_code_23\n                                ,diagnosis_code_24\n                                ,diagnosis_code_25)\n            )pdx\n)\n, condition_poa as(\n  select \n    claim_id\n    ,present_on_admit_code\n    ,cast(replace(diagnosis_rank,'DIAGNOSIS_POA_') as int) as diagnosis_rank\n  from tuva.core.encounter_claim_line_stage\n  unpivot(\n    present_on_admit_code for diagnosis_rank in (diagnosis_poa_1\n                                            ,diagnosis_poa_2\n                                            ,diagnosis_poa_3\n                                            ,diagnosis_poa_4\n                                            ,diagnosis_poa_5\n                                            ,diagnosis_poa_6\n                                            ,diagnosis_poa_7\n                                            ,diagnosis_poa_8\n                                            ,diagnosis_poa_9\n                                            ,diagnosis_poa_10\n                                            ,diagnosis_poa_11\n                                            ,diagnosis_poa_12\n                                            ,diagnosis_poa_13\n                                            ,diagnosis_poa_14\n                                            ,diagnosis_poa_15\n                                            ,diagnosis_poa_16\n                                            ,diagnosis_poa_17\n                                            ,diagnosis_poa_18\n                                            ,diagnosis_poa_19\n                                            ,diagnosis_poa_20\n                                            ,diagnosis_poa_21\n                                            ,diagnosis_poa_22\n                                            ,diagnosis_poa_23\n                                            ,diagnosis_poa_24\n                                            ,diagnosis_poa_25)\n            )ppoa\n)\nselect distinct\n  cast(c.encounter_id as varchar) as encounter_id\n  ,cast(c.patient_id as varchar) as patient_id\n  ,cast(c.condition_date as date) as condition_date\n  ,cast('discharge diagnosis' as varchar) as condition_type\n  ,cast(c.code_type as varchar) as code_type\n  ,cast(replace(c.code,'.','') as varchar) as code\n  ,cast(dx.short_description as varchar) as description\n  ,cast(c.diagnosis_rank as int) as diagnosis_rank\n  ,cast(p.present_on_admit_code as varchar) as present_on_admit_code\n  ,cast(poa.present_on_admit_description as varchar) as present_on_admit_description\n  ,cast(data_source as varchar) as data_source\nfrom condition_code c\nleft join condition_poa p\n  ON c.claim_id = p.claim_id\n  AND c.diagnosis_rank = p.diagnosis_rank\nleft join tuva.terminology.icd_10_cm dx\n  on c.code = icd_10_cm\n  and c.code_type in ('icd-10-cm')\nleft join tuva.terminology.present_on_admission poa\n  on p.present_on_admit_code = poa.present_on_admit_code\nwhere code <> ''", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.condition"}, "model.claims_preprocessing.claims_preprocessing__eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.eligibility", "seed.terminology.terminology__medicare_dual_eligibility", "seed.terminology.terminology__medicare_status"]}, "config": {"enabled": true, "alias": "eligibility", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__eligibility"], "unique_id": "model.claims_preprocessing.claims_preprocessing__eligibility", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate patient coverage details.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nselect distinct\n    cast(elig.patient_id as varchar) as patient_id\n    , cast(elig.member_id as varchar) as member_id\n    , date(elig.enrollment_start_date) as enrollment_start_date\n    , date(elig.enrollment_end_date) as enrollment_end_date\n    , cast(elig.payer as varchar) as payer\n    , cast(elig.payer_type as varchar) as payer_type\n    , cast(elig.dual_status_code as varchar) as dual_status_code\n    , cast(dual.dual_status_description as varchar) as dual_status_description\n    , cast(elig.medicare_status_code as varchar) as medicare_status_code\n    , cast(status.medicare_status_description as varchar) as medicare_status_description\n    , cast(elig.data_source as varchar) as data_source\nfrom {{ var('eligibility')}} elig\nleft join {{ ref('terminology__medicare_dual_eligibility')}} dual\n    on elig.dual_status_code = dual.dual_status_code\nleft join {{ ref('terminology__medicare_status')}} status\n    on elig.medicare_status_code = status.medicare_status_code", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "claims_preprocessing__eligibility.sql", "original_file_path": "models/claims_preprocessing__eligibility.sql", "name": "claims_preprocessing__eligibility", "alias": "eligibility", "checksum": {"name": "sha256", "checksum": "d83a2d55a889f55fafdd0ebfc65c6787824efaebcc6eb2a00a98e9a33dd60fea"}, "tags": ["claims_preprocessing"], "refs": [["terminology__medicare_dual_eligibility"], ["terminology__medicare_status"]], "sources": [["claims_input", "eligibility"]], "metrics": [], "description": "eligibility details", "columns": {"patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/claims_preprocessing__eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "eligibility", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.2203512, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate patient coverage details.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\nselect distinct\n    cast(elig.patient_id as varchar) as patient_id\n    , cast(elig.member_id as varchar) as member_id\n    , date(elig.enrollment_start_date) as enrollment_start_date\n    , date(elig.enrollment_end_date) as enrollment_end_date\n    , cast(elig.payer as varchar) as payer\n    , cast(elig.payer_type as varchar) as payer_type\n    , cast(elig.dual_status_code as varchar) as dual_status_code\n    , cast(dual.dual_status_description as varchar) as dual_status_description\n    , cast(elig.medicare_status_code as varchar) as medicare_status_code\n    , cast(status.medicare_status_description as varchar) as medicare_status_description\n    , cast(elig.data_source as varchar) as data_source\nfrom tuva.claims_input.eligibility elig\nleft join tuva.terminology.medicare_dual_eligibility dual\n    on elig.dual_status_code = dual.dual_status_code\nleft join tuva.terminology.medicare_status status\n    on elig.medicare_status_code = status.medicare_status_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.eligibility"}, "model.claims_preprocessing.claims_preprocessing__encounter_type_union": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter"]}, "config": {"enabled": true, "alias": "encounter_type_union", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__encounter_type_union"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "raw_code": "{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nwith encounter_type_union_stage as(\n  select\n      cast(claim_id as varchar) as claim_id\n    , cast(claim_line_number as int) as claim_line_number\n    , cast(claim_type as varchar) as claim_type\n    , cast(patient_id as varchar) as patient_id\n    , cast(encounter_type as varchar) as encounter_type\n    , cast(claim_start_date as date) as claim_start_date\n    , cast(claim_end_date as date) as claim_end_date\n    , cast(discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(billing_npi as varchar) as billing_npi\n    , cast(facility_npi as varchar) as facility_npi\n    , cast(paid_amount as numeric(38,2)) as paid_amount\n    , cast(charge_amount as numeric(38,2)) as charge_amount\n    , cast(bill_type_code as varchar) as bill_type_code\n    , cast(revenue_center_code as varchar) as revenue_center_code\n    , cast(place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by claim_id order by claim_line_number) as int) as row_number\n  from {{ ref('claims_preprocessing__encounter_type_mapping')}}\n\n  union all\n\n  select\n      cast(med.claim_id as varchar) as claim_id\n    , cast(med.claim_line_number as int) as claim_line_number\n    , cast(med.claim_type as varchar) as claim_type\n    , cast(med.patient_id as varchar) as patient_id\n    , cast(ainp.encounter_type as varchar) as encounter_type\n    , cast(med.claim_start_date as date) as claim_start_date\n    , cast(med.claim_end_date as date) as claim_end_date\n    , cast(med.discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(med.billing_npi as varchar) as billing_npi\n    , cast(med.facility_npi as varchar) as facility_npi\n    , cast(med.paid_amount as numeric(38,2)) as paid_amount\n    , cast(med.charge_amount as numeric(38,2)) as charge_amount\n    , cast(ainp.bill_type_code as varchar) as bill_type_code\n    , cast(ainp.revenue_center_code as varchar) as revenue_center_code\n    , cast(ainp.place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by med.claim_id order by med.claim_line_number) as int) as row_number\n  from {{ var('medical_claim')}} med\n  inner join {{ ref('claims_preprocessing__acute_inpatient_encounter')}} ainp\n    on med.claim_id = ainp.claim_id    \n\n  union all\n\n  select\n      cast(med.claim_id as varchar) as claim_id\n    , cast(med.claim_line_number as int) as claim_line_number\n    , cast(med.claim_type as varchar) as claim_type\n    , cast(med.patient_id as varchar) as patient_id\n    , cast(ed.encounter_type as varchar) as encounter_type\n    , cast(med.claim_start_date as date) as claim_start_date\n    , cast(med.claim_end_date as date) as claim_end_date\n    , cast(med.discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(med.billing_npi as varchar) as billing_npi\n    , cast(med.facility_npi as varchar) as facility_npi\n    , cast(med.paid_amount as numeric(38,2)) as paid_amount\n    , cast(med.charge_amount as numeric(38,2)) as charge_amount\n    , cast(med.bill_type_code as varchar) as bill_type_code\n    , cast(med.revenue_center_code as varchar) as revenue_center_code\n    , cast(med.place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by med.claim_id order by med.claim_line_number) as int) as row_number\n  from {{ var('medical_claim')}} med\n  inner join {{ ref('claims_preprocessing__emergency_department_encounter')}} ed\n    on med.claim_id = ed.claim_id\n  left join {{ ref('claims_preprocessing__acute_inpatient_encounter')}} ainp\n    on ed.claim_id = ainp.claim_id\n  where ainp.claim_id is null  \n)\n\nselect \n    cast(claim_id as varchar) as claim_id\n  , cast(claim_line_number as int) as claim_line_number\n  , cast(lower(claim_type) as varchar) as claim_type\n  , cast(patient_id as varchar) as patient_id\n  , cast(encounter_type as varchar) as encounter_type\n  , cast(claim_start_date as date) as claim_start_date\n  , cast(claim_end_date as date) as claim_end_date\n  , cast(discharge_disposition_code as varchar) as discharge_disposition_code\n  , cast(billing_npi as varchar) as billing_npi\n  , cast(facility_npi as varchar) as facility_npi\n  , cast(paid_amount as numeric(38,2)) as paid_amount\n  , cast(charge_amount as numeric(38,2)) as charge_amount\n  , cast(bill_type_code as varchar) as bill_type_code\n  , cast(revenue_center_code as varchar) as revenue_center_code\n  , cast(place_of_service_code as varchar) as place_of_service_code\n  , cast(row_number() over (partition by patient_id, encounter_type, claim_type order by claim_start_date, claim_end_date) as int) as row_sequence\nfrom encounter_type_union_stage\nwhere row_number = 1", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "staging/claims_preprocessing__encounter_type_union.sql", "original_file_path": "models/staging/claims_preprocessing__encounter_type_union.sql", "name": "claims_preprocessing__encounter_type_union", "alias": "encounter_type_union", "checksum": {"name": "sha256", "checksum": "8ce0cdf4e2acf59927f5d60ebac52d6ef0f5beff351e39600f0cf8d7e29ea0ec"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_mapping"], ["claims_preprocessing__acute_inpatient_encounter"], ["claims_preprocessing__emergency_department_encounter"], ["claims_preprocessing__acute_inpatient_encounter"]], "sources": [["claims_input", "medical_claim"], ["claims_input", "medical_claim"]], "metrics": [], "description": "Union of claims mapped to an encounter", "columns": {"claim_id": {"name": "claim_id", "description": "Claim id from data source and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/staging/claims_preprocessing__encounter_type_union.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_type_union", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.1519117, "compiled_code": "\n\nwith encounter_type_union_stage as(\n  select\n      cast(claim_id as varchar) as claim_id\n    , cast(claim_line_number as int) as claim_line_number\n    , cast(claim_type as varchar) as claim_type\n    , cast(patient_id as varchar) as patient_id\n    , cast(encounter_type as varchar) as encounter_type\n    , cast(claim_start_date as date) as claim_start_date\n    , cast(claim_end_date as date) as claim_end_date\n    , cast(discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(billing_npi as varchar) as billing_npi\n    , cast(facility_npi as varchar) as facility_npi\n    , cast(paid_amount as numeric(38,2)) as paid_amount\n    , cast(charge_amount as numeric(38,2)) as charge_amount\n    , cast(bill_type_code as varchar) as bill_type_code\n    , cast(revenue_center_code as varchar) as revenue_center_code\n    , cast(place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by claim_id order by claim_line_number) as int) as row_number\n  from tuva.core.encounter_type_mapping\n\n  union all\n\n  select\n      cast(med.claim_id as varchar) as claim_id\n    , cast(med.claim_line_number as int) as claim_line_number\n    , cast(med.claim_type as varchar) as claim_type\n    , cast(med.patient_id as varchar) as patient_id\n    , cast(ainp.encounter_type as varchar) as encounter_type\n    , cast(med.claim_start_date as date) as claim_start_date\n    , cast(med.claim_end_date as date) as claim_end_date\n    , cast(med.discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(med.billing_npi as varchar) as billing_npi\n    , cast(med.facility_npi as varchar) as facility_npi\n    , cast(med.paid_amount as numeric(38,2)) as paid_amount\n    , cast(med.charge_amount as numeric(38,2)) as charge_amount\n    , cast(ainp.bill_type_code as varchar) as bill_type_code\n    , cast(ainp.revenue_center_code as varchar) as revenue_center_code\n    , cast(ainp.place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by med.claim_id order by med.claim_line_number) as int) as row_number\n  from tuva.claims_input.medical_claim med\n  inner join tuva.core.acute_inpatient_encounter ainp\n    on med.claim_id = ainp.claim_id    \n\n  union all\n\n  select\n      cast(med.claim_id as varchar) as claim_id\n    , cast(med.claim_line_number as int) as claim_line_number\n    , cast(med.claim_type as varchar) as claim_type\n    , cast(med.patient_id as varchar) as patient_id\n    , cast(ed.encounter_type as varchar) as encounter_type\n    , cast(med.claim_start_date as date) as claim_start_date\n    , cast(med.claim_end_date as date) as claim_end_date\n    , cast(med.discharge_disposition_code as varchar) as discharge_disposition_code\n    , cast(med.billing_npi as varchar) as billing_npi\n    , cast(med.facility_npi as varchar) as facility_npi\n    , cast(med.paid_amount as numeric(38,2)) as paid_amount\n    , cast(med.charge_amount as numeric(38,2)) as charge_amount\n    , cast(med.bill_type_code as varchar) as bill_type_code\n    , cast(med.revenue_center_code as varchar) as revenue_center_code\n    , cast(med.place_of_service_code as varchar) as place_of_service_code\n    , cast(row_number() over (partition by med.claim_id order by med.claim_line_number) as int) as row_number\n  from tuva.claims_input.medical_claim med\n  inner join tuva.core.emergency_department_encounter ed\n    on med.claim_id = ed.claim_id\n  left join tuva.core.acute_inpatient_encounter ainp\n    on ed.claim_id = ainp.claim_id\n  where ainp.claim_id is null  \n)\n\nselect \n    cast(claim_id as varchar) as claim_id\n  , cast(claim_line_number as int) as claim_line_number\n  , cast(lower(claim_type) as varchar) as claim_type\n  , cast(patient_id as varchar) as patient_id\n  , cast(encounter_type as varchar) as encounter_type\n  , cast(claim_start_date as date) as claim_start_date\n  , cast(claim_end_date as date) as claim_end_date\n  , cast(discharge_disposition_code as varchar) as discharge_disposition_code\n  , cast(billing_npi as varchar) as billing_npi\n  , cast(facility_npi as varchar) as facility_npi\n  , cast(paid_amount as numeric(38,2)) as paid_amount\n  , cast(charge_amount as numeric(38,2)) as charge_amount\n  , cast(bill_type_code as varchar) as bill_type_code\n  , cast(revenue_center_code as varchar) as revenue_center_code\n  , cast(place_of_service_code as varchar) as place_of_service_code\n  , cast(row_number() over (partition by patient_id, encounter_type, claim_type order by claim_start_date, claim_end_date) as int) as row_sequence\nfrom encounter_type_union_stage\nwhere row_number = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_type_union"}, "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "seed.terminology.terminology__revenue_center", "seed.terminology.terminology__revenue_center", "seed.terminology.terminology__place_of_service"]}, "config": {"enabled": true, "alias": "emergency_department_encounter", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__emergency_department_encounter"], "unique_id": "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      November 2022\n-- Purpose      Map claims to emergency department that match the following criteria:\n--              Institutional\n--                1) Contains emergency department revenue code\n--                2) Does not contain room and board code on same claim\n--              Professional\n--                1) Place of service = 23\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\n\nwith claim_emergency_department_eligibility as(\n  select \n      claim_type\n    , med.revenue_center_code\n    , bill_type_code\n    , ms_drg_code\n    , claim_id\n  from {{ var('medical_claim')}} med\n  where med.revenue_center_code in ('0450','0451','0452','0459','0981')\n)\n, room_and_board_claims as(\n  select \n     med.revenue_center_code\n    , rev.revenue_center_description\n    , claim_id\n  from {{ var('medical_claim')}} med\n  inner join {{ ref('terminology__revenue_center')}} rev\n    on med.revenue_center_code = rev.revenue_center_code\n   where med.revenue_center_code in ('0100','0101','0110','0111','0112','0113','0114','0116','0117','0118','0119'\n  ,'0120','0121','0122','0123','0124','0126','0127','0128','0129','0130','0131','0132','0133','0134'\n  ,'0136','0137','0138','0139','0140','0141','0142','0143','0144','0146','0147','0148','0149','0150'\n  ,'0151','0152','0153','0154','0156','0157','0158','0159','0160','0164','0167','0169','0170','0171'\n  ,'0172','0173','0174','0179','0190','0191','0192','0193','0194','0199','0200','0201','0202','0203'\n  ,'0204','0206','0207','0208','0209','0210','0211','0212','0213','0214','0219','1000','1001','1002')\n)\n\nselect \n      e.claim_type\n    , 'emergency department' as encounter_type\n    , rev.revenue_center_code as revenue_center_code\n    , rev.revenue_center_description as revenue_center_description\n    , e.bill_type_code\n    , e.ms_drg_code\n    , e.claim_id \n    , null as place_of_service_code\n    , null as place_of_service_description\nfrom claim_emergency_department_eligibility e\ninner join {{ ref('terminology__revenue_center')}} rev\n  on e.revenue_center_code = rev.revenue_center_code\nleft join room_and_board_claims r\n    on e.claim_id = r.claim_id\nwhere r.claim_id is null\n\nunion all \n\nselect\n      med.claim_type\n    , 'emergency department' as encounter_type\n    , null as revenue_center_code\n    , null as revenue_center_description\n    , null as bill_type_code\n    , null as ms_drg_code\n    , med.claim_id \n    , pos.place_of_service_code as place_of_service_code\n    , pos.place_of_service_description as place_of_service_description\nfrom {{ var('medical_claim')}} med\n   inner join {{ ref('terminology__place_of_service')}} pos\n    on med.place_of_service_code = pos.place_of_service_code\nwhere pos.place_of_service_code = '23'", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "staging/claims_preprocessing__emergency_department_encounter.sql", "original_file_path": "models/staging/claims_preprocessing__emergency_department_encounter.sql", "name": "claims_preprocessing__emergency_department_encounter", "alias": "emergency_department_encounter", "checksum": {"name": "sha256", "checksum": "92d44719d1cfab160702d9d5902207b9a16df548d2fa2fb73722bc0c26bd34f9"}, "tags": ["claims_preprocessing"], "refs": [["terminology__revenue_center"], ["terminology__revenue_center"], ["terminology__place_of_service"]], "sources": [["claims_input", "medical_claim"], ["claims_input", "medical_claim"], ["claims_input", "medical_claim"]], "metrics": [], "description": "Mapping of ED encounters", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/staging/claims_preprocessing__emergency_department_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "emergency_department_encounter", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.1017773, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      November 2022\n-- Purpose      Map claims to emergency department that match the following criteria:\n--              Institutional\n--                1) Contains emergency department revenue code\n--                2) Does not contain room and board code on same claim\n--              Professional\n--                1) Place of service = 23\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n\n\n\nwith claim_emergency_department_eligibility as(\n  select \n      claim_type\n    , med.revenue_center_code\n    , bill_type_code\n    , ms_drg_code\n    , claim_id\n  from tuva.claims_input.medical_claim med\n  where med.revenue_center_code in ('0450','0451','0452','0459','0981')\n)\n, room_and_board_claims as(\n  select \n     med.revenue_center_code\n    , rev.revenue_center_description\n    , claim_id\n  from tuva.claims_input.medical_claim med\n  inner join tuva.terminology.revenue_center rev\n    on med.revenue_center_code = rev.revenue_center_code\n   where med.revenue_center_code in ('0100','0101','0110','0111','0112','0113','0114','0116','0117','0118','0119'\n  ,'0120','0121','0122','0123','0124','0126','0127','0128','0129','0130','0131','0132','0133','0134'\n  ,'0136','0137','0138','0139','0140','0141','0142','0143','0144','0146','0147','0148','0149','0150'\n  ,'0151','0152','0153','0154','0156','0157','0158','0159','0160','0164','0167','0169','0170','0171'\n  ,'0172','0173','0174','0179','0190','0191','0192','0193','0194','0199','0200','0201','0202','0203'\n  ,'0204','0206','0207','0208','0209','0210','0211','0212','0213','0214','0219','1000','1001','1002')\n)\n\nselect \n      e.claim_type\n    , 'emergency department' as encounter_type\n    , rev.revenue_center_code as revenue_center_code\n    , rev.revenue_center_description as revenue_center_description\n    , e.bill_type_code\n    , e.ms_drg_code\n    , e.claim_id \n    , null as place_of_service_code\n    , null as place_of_service_description\nfrom claim_emergency_department_eligibility e\ninner join tuva.terminology.revenue_center rev\n  on e.revenue_center_code = rev.revenue_center_code\nleft join room_and_board_claims r\n    on e.claim_id = r.claim_id\nwhere r.claim_id is null\n\nunion all \n\nselect\n      med.claim_type\n    , 'emergency department' as encounter_type\n    , null as revenue_center_code\n    , null as revenue_center_description\n    , null as bill_type_code\n    , null as ms_drg_code\n    , med.claim_id \n    , pos.place_of_service_code as place_of_service_code\n    , pos.place_of_service_description as place_of_service_description\nfrom tuva.claims_input.medical_claim med\n   inner join tuva.terminology.place_of_service pos\n    on med.place_of_service_code = pos.place_of_service_code\nwhere pos.place_of_service_code = '23'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.emergency_department_encounter"}, "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "seed.terminology.terminology__ms_drg", "seed.terminology.terminology__revenue_center", "seed.terminology.terminology__place_of_service"]}, "config": {"enabled": true, "alias": "acute_inpatient_encounter", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__acute_inpatient_encounter"], "unique_id": "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      November 2022\n-- Purpose      Map claims to acute inpatient that match the following criteria:\n--              Institutional\n--                1) Contains room and board revenue code\n--                2) Bill type code starts with 1 (hospital), 4 (relgious non-medical), 8 (CAH/ASC)\n--                3) MS-DRG is valid\n--              Professional\n--                1) Place of service = 21\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\n\nwith claim_acute_inpatient_eligibility as(\n  select \n      med.claim_type\n    , med.claim_id\n    , med.revenue_center_code\n    , med.bill_type_code\n    , med.ms_drg_code\n  from {{ var('medical_claim')}} med\n  where med.revenue_center_code in ('0100','0101','0110','0111','0112','0113','0114','0116','0117','0118','0119'\n  ,'0120','0121','0122','0123','0124','0126','0127','0128','0129','0130','0131','0132','0133','0134'\n  ,'0136','0137','0138','0139','0140','0141','0142','0143','0144','0146','0147','0148','0149','0150'\n  ,'0151','0152','0153','0154','0156','0157','0158','0159','0160','0164','0167','0169','0170','0171'\n  ,'0172','0173','0174','0179','0190','0191','0192','0193','0194','0199','0200','0201','0202','0203'\n  ,'0204','0206','0207','0208','0209','0210','0211','0212','0213','0214','0219','1000','1001','1002')\n  and left(try_cast(bill_type_code as int),1) in (1,4,8)\n  and ms_drg_code in (select ms_drg_code from {{ ref('terminology__ms_drg')}})\n)\nselect\n    claim_type\n  , 'acute inpatient' as encounter_type\n  , rev.revenue_center_code as revenue_center_code\n  , rev.revenue_center_description as revenue_center_description\n  , bill_type_code\n  , ms_drg_code\n  , claim_id \n  , null as place_of_service_code\n  , null as place_of_service_description\nfrom claim_acute_inpatient_eligibility e\ninner join {{ ref('terminology__revenue_center')}} rev\n  on e.revenue_center_code = rev.revenue_center_code\n\n union all\n\n select\n      claim_type\n    , 'acute inpatient' as encounter_type\n    , null as revenue_center_code\n    , null as revenue_center_description\n    , null as bill_type_code\n    , null as ms_drg_code\n    , claim_id \n    , pos.place_of_service_code as place_of_service_code\n    , pos.place_of_service_description as place_of_service_description\n from {{ var('medical_claim')}} med\n  inner join {{ ref('terminology__place_of_service')}} pos\n  on med.place_of_service_code = pos.place_of_service_code\n where med.place_of_service_code in ('21')", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "staging/claims_preprocessing__acute_inpatient_encounter.sql", "original_file_path": "models/staging/claims_preprocessing__acute_inpatient_encounter.sql", "name": "claims_preprocessing__acute_inpatient_encounter", "alias": "acute_inpatient_encounter", "checksum": {"name": "sha256", "checksum": "e86ddffa0939d2595939c4dfbcf0688034c9c4201477277f60d7b8943858d263"}, "tags": ["claims_preprocessing"], "refs": [["terminology__ms_drg"], ["terminology__revenue_center"], ["terminology__place_of_service"]], "sources": [["claims_input", "medical_claim"], ["claims_input", "medical_claim"]], "metrics": [], "description": "Mapping of acute inpatient encounter", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/staging/claims_preprocessing__acute_inpatient_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "acute_inpatient_encounter", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.095339, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      November 2022\n-- Purpose      Map claims to acute inpatient that match the following criteria:\n--              Institutional\n--                1) Contains room and board revenue code\n--                2) Bill type code starts with 1 (hospital), 4 (relgious non-medical), 8 (CAH/ASC)\n--                3) MS-DRG is valid\n--              Professional\n--                1) Place of service = 21\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n\n\n\nwith claim_acute_inpatient_eligibility as(\n  select \n      med.claim_type\n    , med.claim_id\n    , med.revenue_center_code\n    , med.bill_type_code\n    , med.ms_drg_code\n  from tuva.claims_input.medical_claim med\n  where med.revenue_center_code in ('0100','0101','0110','0111','0112','0113','0114','0116','0117','0118','0119'\n  ,'0120','0121','0122','0123','0124','0126','0127','0128','0129','0130','0131','0132','0133','0134'\n  ,'0136','0137','0138','0139','0140','0141','0142','0143','0144','0146','0147','0148','0149','0150'\n  ,'0151','0152','0153','0154','0156','0157','0158','0159','0160','0164','0167','0169','0170','0171'\n  ,'0172','0173','0174','0179','0190','0191','0192','0193','0194','0199','0200','0201','0202','0203'\n  ,'0204','0206','0207','0208','0209','0210','0211','0212','0213','0214','0219','1000','1001','1002')\n  and left(try_cast(bill_type_code as int),1) in (1,4,8)\n  and ms_drg_code in (select ms_drg_code from tuva.terminology.ms_drg)\n)\nselect\n    claim_type\n  , 'acute inpatient' as encounter_type\n  , rev.revenue_center_code as revenue_center_code\n  , rev.revenue_center_description as revenue_center_description\n  , bill_type_code\n  , ms_drg_code\n  , claim_id \n  , null as place_of_service_code\n  , null as place_of_service_description\nfrom claim_acute_inpatient_eligibility e\ninner join tuva.terminology.revenue_center rev\n  on e.revenue_center_code = rev.revenue_center_code\n\n union all\n\n select\n      claim_type\n    , 'acute inpatient' as encounter_type\n    , null as revenue_center_code\n    , null as revenue_center_description\n    , null as bill_type_code\n    , null as ms_drg_code\n    , claim_id \n    , pos.place_of_service_code as place_of_service_code\n    , pos.place_of_service_description as place_of_service_description\n from tuva.claims_input.medical_claim med\n  inner join tuva.terminology.place_of_service pos\n  on med.place_of_service_code = pos.place_of_service_code\n where med.place_of_service_code in ('21')", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.acute_inpatient_encounter"}, "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter"]}, "config": {"enabled": true, "alias": "encounter_type_mapping", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__encounter_type_mapping"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      May 2022\n-- Purpose      Map claims to encounter types at the line level.  Institutional claims use rev code or \n--                  bill type, professional claims use place of service.\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n--\n-- 06/15/2022  Thu Xuan Vu\n--      Fixed spelling of treatment and psychiatric\n-- 09/27/2022  Thu Xuan Vu\n--      Changed maping to the claim level.\n--      Using MIN() since not all claims may start with 1\n--      Removed the creation of a new encounter ID since a claim can no longer split into \n--          different encounter types.\n--      Revenue code 001 no longer omitted since it cannot be split into a seperate claim\n--      Added row_number for downstream ordering\n--      Added billing_npi for use in professional merging\n-- 10/14/2022 Thu Xuan Vu\n--      Added leading zero to place of service codes\n-- 11/01/2022 Thu Xuan Vu\n--      Added logic to omit claims that have been mapped by seperate logic (ED and Acute Inpatient)\n--      Casting claim_type as lower to accomodate case sensitive collation\n---------------------------------------------------------------------------------------------------------\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\n\nwith claim_header as(\n    select \n        claim_id\n        ,min(claim_line_number) as claim_line_number\n    from {{ var('medical_claim')}}\n    group by\n        claim_id\n)\n\n  select\n    case\n      when left(trim(med.bill_type_code),2) = '89' and med.revenue_center_code = '0570' then 'home health'\n      when left(trim(med.bill_type_code),2) = '11' then 'other'\n      when left(trim(med.bill_type_code),2) = '12' then 'other'\n      when left(trim(med.bill_type_code),2) = '13' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '14' then 'other'\n      when left(trim(med.bill_type_code),2) = '15' then 'other'\n      when left(trim(med.bill_type_code),2) = '16' then 'other'\n      when left(trim(med.bill_type_code),2) = '17' then 'other'\n      when left(trim(med.bill_type_code),2) = '18' then 'other'\n      when left(trim(med.bill_type_code),2) = '21' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '22' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '23' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '24' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '25' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '26' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '27' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '28' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '31' then 'home health'\n      when left(trim(med.bill_type_code),2) = '32' then 'home health'\n      when left(trim(med.bill_type_code),2) = '33' then 'home health'\n      when left(trim(med.bill_type_code),2) = '34' then 'home health'\n      when left(trim(med.bill_type_code),2) = '35' then 'home health'\n      when left(trim(med.bill_type_code),2) = '36' then 'home health'\n      when left(trim(med.bill_type_code),2) = '37' then 'home health'\n      when left(trim(med.bill_type_code),2) = '38' then 'home health'\n      when left(trim(med.bill_type_code),2) = '41' then 'other'\n      when left(trim(med.bill_type_code),2) = '42' then 'other'\n      when left(trim(med.bill_type_code),2) = '43' then 'other'\n      when left(trim(med.bill_type_code),2) = '44' then 'other'\n      when left(trim(med.bill_type_code),2) = '45' then 'other'\n      when left(trim(med.bill_type_code),2) = '46' then 'other'\n      when left(trim(med.bill_type_code),2) = '47' then 'other'\n      when left(trim(med.bill_type_code),2) = '48' then 'other'\n      when left(trim(med.bill_type_code),2) = '51' then 'other'\n      when left(trim(med.bill_type_code),2) = '52' then 'other'\n      when left(trim(med.bill_type_code),2) = '53' then 'other'\n      when left(trim(med.bill_type_code),2) = '54' then 'other'\n      when left(trim(med.bill_type_code),2) = '55' then 'other'\n      when left(trim(med.bill_type_code),2) = '56' then 'other'\n      when left(trim(med.bill_type_code),2) = '57' then 'other'\n      when left(trim(med.bill_type_code),2) = '58' then 'other'\n      when left(trim(med.bill_type_code),2) = '61' then 'other'\n      when left(trim(med.bill_type_code),2) = '62' then 'other'\n      when left(trim(med.bill_type_code),2) = '63' then 'other'\n      when left(trim(med.bill_type_code),2) = '64' then 'other'\n      when left(trim(med.bill_type_code),2) = '65' then 'other'\n      when left(trim(med.bill_type_code),2) = '66' then 'other'\n      when left(trim(med.bill_type_code),2) = '67' then 'other'\n      when left(trim(med.bill_type_code),2) = '68' then 'other'\n      when left(trim(med.bill_type_code),2) = '71' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '72' then 'dialysis center'\n      when left(trim(med.bill_type_code),2) = '73' then 'other'\n      when left(trim(med.bill_type_code),2) = '74' then 'outpatient rehabilitation'\n      when left(trim(med.bill_type_code),2) = '75' then 'outpatient rehabilitation'\n      when left(trim(med.bill_type_code),2) = '76' then 'mental health center'\n      when left(trim(med.bill_type_code),2) = '79' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '81' then 'hospice'\n      when left(trim(med.bill_type_code),2) = '82' then 'hospice'\n      when left(trim(med.bill_type_code),2) = '83' then 'ambulatory surgical center'\n      when left(trim(med.bill_type_code),2) = '84' then 'other'\n      when left(trim(med.bill_type_code),2) = '85' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '89' then 'other'\n      when trim(med.place_of_service_code) = '01' then 'other'\n      when trim(med.place_of_service_code) = '02' then 'telehealth'\n      when trim(med.place_of_service_code) = '03' then 'other'\n      when trim(med.place_of_service_code) = '04' then 'other'\n      when trim(med.place_of_service_code) = '05' then 'other'\n      when trim(med.place_of_service_code) = '06' then 'other'\n      when trim(med.place_of_service_code) = '07' then 'other'\n      when trim(med.place_of_service_code) = '08' then 'other'\n      when trim(med.place_of_service_code) = '09' then 'other'\n      when trim(med.place_of_service_code) = '10' then 'home health'\n      when trim(med.place_of_service_code) = '11' then 'office visit'\n      when trim(med.place_of_service_code) = '12' then 'home health'\n      when trim(med.place_of_service_code) = '13' then 'other'\n      when trim(med.place_of_service_code) = '14' then 'other'\n      when trim(med.place_of_service_code) = '15' then 'other'\n      when trim(med.place_of_service_code) = '16' then 'other'\n      when trim(med.place_of_service_code) = '17' then 'office visit'\n      when trim(med.place_of_service_code) = '18' then 'other'\n      when trim(med.place_of_service_code) = '19' then 'outpatient'\n      when trim(med.place_of_service_code) = '20' then 'urgent care'\n      when trim(med.place_of_service_code) = '21' then 'other'\n      when trim(med.place_of_service_code) = '22' then 'outpatient'\n      when trim(med.place_of_service_code) = '23' then 'other'\n      when trim(med.place_of_service_code) = '24' then 'ambulatory surgical center'\n      when trim(med.place_of_service_code) = '25' then 'outpatient'\n      when trim(med.place_of_service_code) = '26' then 'other'\n      when trim(med.place_of_service_code) = '31' then 'skilled nursing facility'\n      when trim(med.place_of_service_code) = '32' then 'skilled nursing facility'\n      when trim(med.place_of_service_code) = '33' then 'other'\n      when trim(med.place_of_service_code) = '34' then 'hospice'\n      when trim(med.place_of_service_code) = '41' then 'other'\n      when trim(med.place_of_service_code) = '42' then 'other'\n      when trim(med.place_of_service_code) = '49' then 'office visit'\n      when trim(med.place_of_service_code) = '50' then 'office visit'\n      when trim(med.place_of_service_code) = '51' then 'inpatient psychiatric'\n      when trim(med.place_of_service_code) = '52' then 'inpatient psychiatric'\n      when trim(med.place_of_service_code) = '53' then 'mental health center'\n      when trim(med.place_of_service_code) = '54' then 'other'\n      when trim(med.place_of_service_code) = '55' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '56' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '57' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '58' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '60' then 'other'\n      when trim(med.place_of_service_code) = '61' then 'inpatient rehabilitation'\n      when trim(med.place_of_service_code) = '62' then 'outpatient rehabilitation'\n      when trim(med.place_of_service_code) = '65' then 'dialysis center'\n      when trim(med.place_of_service_code) = '71' then 'office visit'\n      when trim(med.place_of_service_code) = '72' then 'office visit'\n      when trim(med.place_of_service_code) = '81' then 'specimen collection at lab'\n      when trim(med.place_of_service_code) = '99' then 'other'\n            else 'unmapped'\n    end as encounter_type\n    ,lower(med.claim_type) as claim_type\n    ,med.claim_id\n    ,med.claim_line_number\n    ,med.patient_id\n    ,med.claim_start_date\n    ,med.claim_end_date\n    ,med.discharge_disposition_code\n    ,med.billing_npi\n    ,med.facility_npi\n    ,med.paid_amount\n    ,med.charge_amount\n    ,med.bill_type_code\n    ,med.revenue_center_code\n    ,med.place_of_service_code\n  from {{ var('medical_claim')}} med\n  inner join claim_header head\n    on med.claim_id = head.claim_id\n    and med.claim_line_number = head.claim_line_number\n  left join {{ ref('claims_preprocessing__acute_inpatient_encounter')}} acinp\n    on med.claim_id = acinp.claim_id\n  left join {{ ref('claims_preprocessing__emergency_department_encounter')}} ed\n    on med.claim_id = ed.claim_id\n  where acinp.claim_id is null\n  and ed.claim_id is null", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "staging/claims_preprocessing__encounter_type_mapping.sql", "original_file_path": "models/staging/claims_preprocessing__encounter_type_mapping.sql", "name": "claims_preprocessing__encounter_type_mapping", "alias": "encounter_type_mapping", "checksum": {"name": "sha256", "checksum": "99fef61eb1a82558aa410772811133e017a28f2c9a0e52f0a285ee722692793e"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__acute_inpatient_encounter"], ["claims_preprocessing__emergency_department_encounter"]], "sources": [["claims_input", "medical_claim"], ["claims_input", "medical_claim"]], "metrics": [], "description": "Mapping of institutional and professional claims at the claim level to an encounter type Institutional claims require bill type and revenue codes.  Professional claims require place of service codes.", "columns": {"claim_line_number": {"name": "claim_line_number", "description": "Number of the claim line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Overarching claim type.  Valid values are 'dental','institutional','professional', and 'vision'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_id": {"name": "claim_id", "description": "The source claim id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier of a beneficiary", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_type": {"name": "encounter_type", "description": "The encounter type that has been assigned to the claim line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "The start date of the claim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "The end date of the claim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "The discharge status of the patient at the time the claim was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "The facility ID on the claim.  Does not have to be the NPI however it needs to be a consistent ID within the claim to ensure linking/merging.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "The 3 digit bill type code on the claim.  Should only be on institutional claims.  Facility type (TOB 1) and classification (TOB 2) required for mapping encounter types.  Frequency (TOB 3) not needed and will be ignored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_center_code": {"name": "revenue_center_code", "description": "The 4 digit revenue type code on the claim.  Should only be on institutional claims.  Must be 4 digits including leading zeros.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_of_service_code": {"name": "place_of_service_code", "description": "The 2 digit place of service code on the claim.  Should only appear on professional claims.  Must be 2 digits including leading zero.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/staging/claims_preprocessing__encounter_type_mapping.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_type_mapping", "tags": "claims_preprocessing", "enabled": true}, "created_at": 1668635368.1448696, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      May 2022\n-- Purpose      Map claims to encounter types at the line level.  Institutional claims use rev code or \n--                  bill type, professional claims use place of service.\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n--\n-- 06/15/2022  Thu Xuan Vu\n--      Fixed spelling of treatment and psychiatric\n-- 09/27/2022  Thu Xuan Vu\n--      Changed maping to the claim level.\n--      Using MIN() since not all claims may start with 1\n--      Removed the creation of a new encounter ID since a claim can no longer split into \n--          different encounter types.\n--      Revenue code 001 no longer omitted since it cannot be split into a seperate claim\n--      Added row_number for downstream ordering\n--      Added billing_npi for use in professional merging\n-- 10/14/2022 Thu Xuan Vu\n--      Added leading zero to place of service codes\n-- 11/01/2022 Thu Xuan Vu\n--      Added logic to omit claims that have been mapped by seperate logic (ED and Acute Inpatient)\n--      Casting claim_type as lower to accomodate case sensitive collation\n---------------------------------------------------------------------------------------------------------\n\n\nwith claim_header as(\n    select \n        claim_id\n        ,min(claim_line_number) as claim_line_number\n    from tuva.claims_input.medical_claim\n    group by\n        claim_id\n)\n\n  select\n    case\n      when left(trim(med.bill_type_code),2) = '89' and med.revenue_center_code = '0570' then 'home health'\n      when left(trim(med.bill_type_code),2) = '11' then 'other'\n      when left(trim(med.bill_type_code),2) = '12' then 'other'\n      when left(trim(med.bill_type_code),2) = '13' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '14' then 'other'\n      when left(trim(med.bill_type_code),2) = '15' then 'other'\n      when left(trim(med.bill_type_code),2) = '16' then 'other'\n      when left(trim(med.bill_type_code),2) = '17' then 'other'\n      when left(trim(med.bill_type_code),2) = '18' then 'other'\n      when left(trim(med.bill_type_code),2) = '21' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '22' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '23' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '24' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '25' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '26' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '27' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '28' then 'skilled nursing facility'\n      when left(trim(med.bill_type_code),2) = '31' then 'home health'\n      when left(trim(med.bill_type_code),2) = '32' then 'home health'\n      when left(trim(med.bill_type_code),2) = '33' then 'home health'\n      when left(trim(med.bill_type_code),2) = '34' then 'home health'\n      when left(trim(med.bill_type_code),2) = '35' then 'home health'\n      when left(trim(med.bill_type_code),2) = '36' then 'home health'\n      when left(trim(med.bill_type_code),2) = '37' then 'home health'\n      when left(trim(med.bill_type_code),2) = '38' then 'home health'\n      when left(trim(med.bill_type_code),2) = '41' then 'other'\n      when left(trim(med.bill_type_code),2) = '42' then 'other'\n      when left(trim(med.bill_type_code),2) = '43' then 'other'\n      when left(trim(med.bill_type_code),2) = '44' then 'other'\n      when left(trim(med.bill_type_code),2) = '45' then 'other'\n      when left(trim(med.bill_type_code),2) = '46' then 'other'\n      when left(trim(med.bill_type_code),2) = '47' then 'other'\n      when left(trim(med.bill_type_code),2) = '48' then 'other'\n      when left(trim(med.bill_type_code),2) = '51' then 'other'\n      when left(trim(med.bill_type_code),2) = '52' then 'other'\n      when left(trim(med.bill_type_code),2) = '53' then 'other'\n      when left(trim(med.bill_type_code),2) = '54' then 'other'\n      when left(trim(med.bill_type_code),2) = '55' then 'other'\n      when left(trim(med.bill_type_code),2) = '56' then 'other'\n      when left(trim(med.bill_type_code),2) = '57' then 'other'\n      when left(trim(med.bill_type_code),2) = '58' then 'other'\n      when left(trim(med.bill_type_code),2) = '61' then 'other'\n      when left(trim(med.bill_type_code),2) = '62' then 'other'\n      when left(trim(med.bill_type_code),2) = '63' then 'other'\n      when left(trim(med.bill_type_code),2) = '64' then 'other'\n      when left(trim(med.bill_type_code),2) = '65' then 'other'\n      when left(trim(med.bill_type_code),2) = '66' then 'other'\n      when left(trim(med.bill_type_code),2) = '67' then 'other'\n      when left(trim(med.bill_type_code),2) = '68' then 'other'\n      when left(trim(med.bill_type_code),2) = '71' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '72' then 'dialysis center'\n      when left(trim(med.bill_type_code),2) = '73' then 'other'\n      when left(trim(med.bill_type_code),2) = '74' then 'outpatient rehabilitation'\n      when left(trim(med.bill_type_code),2) = '75' then 'outpatient rehabilitation'\n      when left(trim(med.bill_type_code),2) = '76' then 'mental health center'\n      when left(trim(med.bill_type_code),2) = '79' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '81' then 'hospice'\n      when left(trim(med.bill_type_code),2) = '82' then 'hospice'\n      when left(trim(med.bill_type_code),2) = '83' then 'ambulatory surgical center'\n      when left(trim(med.bill_type_code),2) = '84' then 'other'\n      when left(trim(med.bill_type_code),2) = '85' then 'outpatient'\n      when left(trim(med.bill_type_code),2) = '89' then 'other'\n      when trim(med.place_of_service_code) = '01' then 'other'\n      when trim(med.place_of_service_code) = '02' then 'telehealth'\n      when trim(med.place_of_service_code) = '03' then 'other'\n      when trim(med.place_of_service_code) = '04' then 'other'\n      when trim(med.place_of_service_code) = '05' then 'other'\n      when trim(med.place_of_service_code) = '06' then 'other'\n      when trim(med.place_of_service_code) = '07' then 'other'\n      when trim(med.place_of_service_code) = '08' then 'other'\n      when trim(med.place_of_service_code) = '09' then 'other'\n      when trim(med.place_of_service_code) = '10' then 'home health'\n      when trim(med.place_of_service_code) = '11' then 'office visit'\n      when trim(med.place_of_service_code) = '12' then 'home health'\n      when trim(med.place_of_service_code) = '13' then 'other'\n      when trim(med.place_of_service_code) = '14' then 'other'\n      when trim(med.place_of_service_code) = '15' then 'other'\n      when trim(med.place_of_service_code) = '16' then 'other'\n      when trim(med.place_of_service_code) = '17' then 'office visit'\n      when trim(med.place_of_service_code) = '18' then 'other'\n      when trim(med.place_of_service_code) = '19' then 'outpatient'\n      when trim(med.place_of_service_code) = '20' then 'urgent care'\n      when trim(med.place_of_service_code) = '21' then 'other'\n      when trim(med.place_of_service_code) = '22' then 'outpatient'\n      when trim(med.place_of_service_code) = '23' then 'other'\n      when trim(med.place_of_service_code) = '24' then 'ambulatory surgical center'\n      when trim(med.place_of_service_code) = '25' then 'outpatient'\n      when trim(med.place_of_service_code) = '26' then 'other'\n      when trim(med.place_of_service_code) = '31' then 'skilled nursing facility'\n      when trim(med.place_of_service_code) = '32' then 'skilled nursing facility'\n      when trim(med.place_of_service_code) = '33' then 'other'\n      when trim(med.place_of_service_code) = '34' then 'hospice'\n      when trim(med.place_of_service_code) = '41' then 'other'\n      when trim(med.place_of_service_code) = '42' then 'other'\n      when trim(med.place_of_service_code) = '49' then 'office visit'\n      when trim(med.place_of_service_code) = '50' then 'office visit'\n      when trim(med.place_of_service_code) = '51' then 'inpatient psychiatric'\n      when trim(med.place_of_service_code) = '52' then 'inpatient psychiatric'\n      when trim(med.place_of_service_code) = '53' then 'mental health center'\n      when trim(med.place_of_service_code) = '54' then 'other'\n      when trim(med.place_of_service_code) = '55' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '56' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '57' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '58' then 'substance abuse treatment facility'\n      when trim(med.place_of_service_code) = '60' then 'other'\n      when trim(med.place_of_service_code) = '61' then 'inpatient rehabilitation'\n      when trim(med.place_of_service_code) = '62' then 'outpatient rehabilitation'\n      when trim(med.place_of_service_code) = '65' then 'dialysis center'\n      when trim(med.place_of_service_code) = '71' then 'office visit'\n      when trim(med.place_of_service_code) = '72' then 'office visit'\n      when trim(med.place_of_service_code) = '81' then 'specimen collection at lab'\n      when trim(med.place_of_service_code) = '99' then 'other'\n            else 'unmapped'\n    end as encounter_type\n    ,lower(med.claim_type) as claim_type\n    ,med.claim_id\n    ,med.claim_line_number\n    ,med.patient_id\n    ,med.claim_start_date\n    ,med.claim_end_date\n    ,med.discharge_disposition_code\n    ,med.billing_npi\n    ,med.facility_npi\n    ,med.paid_amount\n    ,med.charge_amount\n    ,med.bill_type_code\n    ,med.revenue_center_code\n    ,med.place_of_service_code\n  from tuva.claims_input.medical_claim med\n  inner join claim_header head\n    on med.claim_id = head.claim_id\n    and med.claim_line_number = head.claim_line_number\n  left join tuva.core.acute_inpatient_encounter acinp\n    on med.claim_id = acinp.claim_id\n  left join tuva.core.emergency_department_encounter ed\n    on med.claim_id = ed.claim_id\n  where acinp.claim_id is null\n  and ed.claim_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_type_mapping"}, "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": "encounter_claim_crosswalk", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_claim_crosswalk"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Create a crosswalk from encounter_id to claim_id\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-- 11/01/2022 Thu Xuan Vu\n--      Creating encounter id for vision and dental claims\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n/** Institutional merged  **/\n\nselect\n  c.group_claim_id as encounter_id\n  ,d.claim_id\n  ,'inst merge' as merge_type\nfrom {{ ref('claims_preprocessing__encounter_type_union')}} d\ninner join {{ ref('claims_preprocessing__inst_merge_crosswalk')}} c\n    on d.claim_id = c.claim_id\n\nunion\n\n/**  Institutional non-merged  **/\n\nselect\n  c.encounter_id\n  ,c.encounter_id as claim_id\n  ,'inst nonmerge' as merge_type\nfrom  {{ ref('claims_preprocessing__inst_encounter_nonmerge')}} c\n\n\nunion\n/**  Professional linked to institutional  **/\nselect \n  encounter_id\n  ,claim_id\n  ,'prof linked to inst merge' as merge_type\nfrom {{ ref('claims_preprocessing__prof_inst_encounter_crosswalk')}}\n\nunion\n\n/** Professional merged  **/\nselect \n  d.encounter_id\n  ,d.claim_id\n  ,'prof merge' as merge_type\nfrom {{ ref('claims_preprocessing__prof_merge_final')}} d\n\nunion\n/**  Professional nonmerged claims  **/\nselect \n  d.claim_id as encounter_id\n  ,d.claim_id\n    ,'prof nonmerge' as merge_type\nfrom {{ ref('claims_preprocessing__encounter_type_union')}} d\nleft join {{ ref('claims_preprocessing__prof_merge_final')}} c\n    on d.claim_id = c.claim_id\nleft join {{ ref('claims_preprocessing__prof_inst_encounter_crosswalk')}} i\n    on i.claim_id = d.claim_id\nwhere d.claim_type = 'professional'\nand c.claim_id is null\nand i.claim_id is null\n\nunion\n/**  Professional nonmerged claims  **/\nselect \n  d.claim_id as encounter_id\n  ,d.claim_id\n  ,'other claim type nonmerge' as merge_type\nfrom {{ ref('claims_preprocessing__encounter_type_union')}} d\nwhere d.claim_type in ('vision','dental')", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__encounter_claim_crosswalk.sql", "original_file_path": "models/intermediate/claims_preprocessing__encounter_claim_crosswalk.sql", "name": "claims_preprocessing__encounter_claim_crosswalk", "alias": "encounter_claim_crosswalk", "checksum": {"name": "sha256", "checksum": "191b830c944c163c7c701779907bde3bb362a1afee105ef3fbe634da9ad15d5c"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__inst_merge_crosswalk"], ["claims_preprocessing__inst_encounter_nonmerge"], ["claims_preprocessing__prof_inst_encounter_crosswalk"], ["claims_preprocessing__prof_merge_final"], ["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__prof_merge_final"], ["claims_preprocessing__prof_inst_encounter_crosswalk"], ["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "A crosswalk between encounter id and  claim id", "columns": {"claim_id": {"name": "claim_id", "description": "Claim id from data source and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__encounter_claim_crosswalk.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_claim_crosswalk", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1087706, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Create a crosswalk from encounter_id to claim_id\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-- 11/01/2022 Thu Xuan Vu\n--      Creating encounter id for vision and dental claims\n-------------------------------------------------------------------------------\n\n/** Institutional merged  **/\n\nselect\n  c.group_claim_id as encounter_id\n  ,d.claim_id\n  ,'inst merge' as merge_type\nfrom tuva.core.encounter_type_union d\ninner join tuva.core.inst_merge_crosswalk c\n    on d.claim_id = c.claim_id\n\nunion\n\n/**  Institutional non-merged  **/\n\nselect\n  c.encounter_id\n  ,c.encounter_id as claim_id\n  ,'inst nonmerge' as merge_type\nfrom  tuva.core.inst_encounter_nonmerge c\n\n\nunion\n/**  Professional linked to institutional  **/\nselect \n  encounter_id\n  ,claim_id\n  ,'prof linked to inst merge' as merge_type\nfrom tuva.core.prof_inst_encounter_crosswalk\n\nunion\n\n/** Professional merged  **/\nselect \n  d.encounter_id\n  ,d.claim_id\n  ,'prof merge' as merge_type\nfrom tuva.core.prof_merge_final d\n\nunion\n/**  Professional nonmerged claims  **/\nselect \n  d.claim_id as encounter_id\n  ,d.claim_id\n    ,'prof nonmerge' as merge_type\nfrom tuva.core.encounter_type_union d\nleft join tuva.core.prof_merge_final c\n    on d.claim_id = c.claim_id\nleft join tuva.core.prof_inst_encounter_crosswalk i\n    on i.claim_id = d.claim_id\nwhere d.claim_type = 'professional'\nand c.claim_id is null\nand i.claim_id is null\n\nunion\n/**  Professional nonmerged claims  **/\nselect \n  d.claim_id as encounter_id\n  ,d.claim_id\n  ,'other claim type nonmerge' as merge_type\nfrom tuva.core.encounter_type_union d\nwhere d.claim_type in ('vision','dental')", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_claim_crosswalk"}, "model.claims_preprocessing.claims_preprocessing__inst_merge_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": "inst_merge_stage", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_merge_stage"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_merge_stage", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Compare institutional claims chronogically to evaluate relationship.  Only continuous \n--                stay encounter types are evaulated for merging.\n-- Notes        Claims for a patient are merged if:\n--                - dates overlap and the facility is the same\n--                - date is off by no more than 1 day, facility is the same, and previous claim has a \n--                  discharge status of 30 - still a patient\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n-- 09/27/2022 Thu Xuan Vu\n--      Removed an excess case statement from the strict overlap logic. \n--        previous_claim_start_date >= claim_start_date listed twice\n--      Changed references of merge_claim_id to claim_id\n---------------------------------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith previous_claim as(\n  select distinct \n    patient_id\n    ,lag(claim_id) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_id\n    ,claim_id\n    ,encounter_type\n    ,lag(claim_start_date) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_start_date\n    ,lag(claim_end_date) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_end_date\n    ,claim_start_date\n    ,claim_end_date\n    ,lag(discharge_disposition_code) over (partition by patient_id, encounter_type order by row_sequence) as previous_discharge_disposition_code\n    ,discharge_disposition_code\n    ,lag(facility_npi) over (partition by patient_id, encounter_type order by row_sequence) as previous_facility_npi\n    ,facility_npi\n    ,row_sequence\n  from {{ ref('claims_preprocessing__encounter_type_union')}}\n  where claim_type = 'institutional'\n  and encounter_type in ('hospice','acute inpatient','skilled nursing facility','home health')\n)\n,merge_criteria as(\n  select \n\tcase\n    \twhen previous_claim_start_date >= claim_start_date \n  \t\t\tand previous_claim_start_date <= claim_end_date \n  \t\t\tand previous_claim_end_date >= claim_start_date\n  \t\t\tand previous_claim_end_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n            \tthen 'strict overlap'\n        when previous_claim_start_date >= claim_start_date \n  \t\t\tand previous_claim_start_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n        \t\tthen 'start overlap'\n        when previous_claim_end_date >= claim_start_date \n  \t\t\tand previous_claim_end_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n        \t\tthen 'end overlap'\n        when datediff(day,previous_claim_end_date,claim_start_date) = 1 \n  \t\t\tand previous_facility_npi = facility_npi \n  \t\t\tand previous_discharge_disposition_code = '30'\n        \tthen 'adjacent'\n       end as merge_criteria\n    ,*\n  from previous_claim\n)\n\nselect \n\tpatient_id\n    ,merge_criteria\n    ,previous_claim_id as claim_id_a\n    ,claim_id as claim_id_b\n    ,encounter_type\n    ,previous_claim_start_date\n    ,previous_claim_end_date\n    ,claim_start_date\n    ,claim_end_date\n    ,previous_facility_npi\n    ,facility_npi\n    ,previous_discharge_disposition_code\n    ,discharge_disposition_code\n    ,row_sequence\nfrom merge_criteria\nwhere merge_criteria is not null", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_merge_stage.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_merge_stage.sql", "name": "claims_preprocessing__inst_merge_stage", "alias": "inst_merge_stage", "checksum": {"name": "sha256", "checksum": "72d013fd0ff45b52980f82a1161b6bc534ac27a9996f8a65de2f9a0a24d9997d"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "List of institutional claims pairs that are eligable for merging.", "columns": {"claim_id_a": {"name": "claim_id_a", "description": "One claim in a pair that are part of the same encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_id_b": {"name": "claim_id_b", "description": "One claim in a pair that are part of the same encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_merge_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_merge_stage", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.193901, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Compare institutional claims chronogically to evaluate relationship.  Only continuous \n--                stay encounter types are evaulated for merging.\n-- Notes        Claims for a patient are merged if:\n--                - dates overlap and the facility is the same\n--                - date is off by no more than 1 day, facility is the same, and previous claim has a \n--                  discharge status of 30 - still a patient\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n-- 09/27/2022 Thu Xuan Vu\n--      Removed an excess case statement from the strict overlap logic. \n--        previous_claim_start_date >= claim_start_date listed twice\n--      Changed references of merge_claim_id to claim_id\n---------------------------------------------------------------------------------------------------------\n\n\nwith previous_claim as(\n  select distinct \n    patient_id\n    ,lag(claim_id) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_id\n    ,claim_id\n    ,encounter_type\n    ,lag(claim_start_date) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_start_date\n    ,lag(claim_end_date) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim_end_date\n    ,claim_start_date\n    ,claim_end_date\n    ,lag(discharge_disposition_code) over (partition by patient_id, encounter_type order by row_sequence) as previous_discharge_disposition_code\n    ,discharge_disposition_code\n    ,lag(facility_npi) over (partition by patient_id, encounter_type order by row_sequence) as previous_facility_npi\n    ,facility_npi\n    ,row_sequence\n  from tuva.core.encounter_type_union\n  where claim_type = 'institutional'\n  and encounter_type in ('hospice','acute inpatient','skilled nursing facility','home health')\n)\n,merge_criteria as(\n  select \n\tcase\n    \twhen previous_claim_start_date >= claim_start_date \n  \t\t\tand previous_claim_start_date <= claim_end_date \n  \t\t\tand previous_claim_end_date >= claim_start_date\n  \t\t\tand previous_claim_end_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n            \tthen 'strict overlap'\n        when previous_claim_start_date >= claim_start_date \n  \t\t\tand previous_claim_start_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n        \t\tthen 'start overlap'\n        when previous_claim_end_date >= claim_start_date \n  \t\t\tand previous_claim_end_date <= claim_end_date \n  \t\t\tand previous_facility_npi = facility_npi\n        \t\tthen 'end overlap'\n        when datediff(day,previous_claim_end_date,claim_start_date) = 1 \n  \t\t\tand previous_facility_npi = facility_npi \n  \t\t\tand previous_discharge_disposition_code = '30'\n        \tthen 'adjacent'\n       end as merge_criteria\n    ,*\n  from previous_claim\n)\n\nselect \n\tpatient_id\n    ,merge_criteria\n    ,previous_claim_id as claim_id_a\n    ,claim_id as claim_id_b\n    ,encounter_type\n    ,previous_claim_start_date\n    ,previous_claim_end_date\n    ,claim_start_date\n    ,claim_end_date\n    ,previous_facility_npi\n    ,facility_npi\n    ,previous_discharge_disposition_code\n    ,discharge_disposition_code\n    ,row_sequence\nfrom merge_criteria\nwhere merge_criteria is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_merge_stage"}, "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"]}, "config": {"enabled": true, "alias": "encounter_prof_stage", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_prof_stage"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage", "raw_code": "-----------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details.\n-----------------------------------------------------------------------------------------------------\n-- Modification History\n--\n-- 07/2022  Thu Xuan Vu\n--      Changing acute inpatient mapping of professional claims to 'professional only acute inpatient'\n--        Downstream, a acute inpatient prof claim will link to an inst claim and the encounter type\n--        will be pulled from the inst claim.  But if a prof acute patient claim has no corresponding\n--        inst claim it's important to seperate out these orphaned prof claims to not over count \n--        inpatient visits.\n-----------------------------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith encounter_combined as(\n  select \n    encounter_id\n    ,min(claim_start_date) as encounter_start_date\n    ,max(claim_end_date) as encounter_end_date\n    ,min(admission_date) as admission_date\n    ,max(discharge_date) as discharge_date\n    ,max(paid_date) as paid_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(allowed_amount) as allowed_amount\n    ,sum(charge_amount) as charge_amount\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}} mc\n  group by\n      encounter_id\n)\n, encounter_stage as(\n  select\n    mc.encounter_id\n    ,mc.patient_id\n    ,case \n        when mc.encounter_type = 'acute inpatient' \n            then 'professional only acute inpatient'\n                else mc.encounter_type\n    end as encounter_type\n    ,mc.admit_source_code\n    ,mc.admit_source_description\n    ,mc.admit_type_code\n    ,mc.admit_type_description\n    ,mc.discharge_disposition_code\n    ,mc.discharge_disposition_description\n    ,mc.rendering_npi\n    ,mc.billing_npi\n    ,mc.facility_npi\n    ,mc.facility_name\n    ,mc.ms_drg_code\n    ,mc.ms_drg_description\n    ,data_source\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_start_date) as row_sequence_first\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_end_date) as row_sequence_last\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}} mc\n  where claim_type in ('professional','vision','dental')\n)\n\nselect distinct\n    cast(s.encounter_id as varchar) as encounter_id\n    ,cast(s.patient_id as varchar) as patient_id\n    ,cast(s.encounter_type as varchar) as encounter_type\n    ,cast(c.encounter_start_date as date) as encounter_start_date\n    ,cast(c.encounter_end_date as date) as encounter_end_date\n    ,cast(c.admission_date as date) as admission_date\n    ,cast(c.discharge_date as date) as discharge_date\n    ,cast(first_value(s.admit_source_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_code\n    ,cast(first_value(s.admit_source_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_description\n    ,cast(first_value(s.admit_type_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_code\n    ,cast(first_value(s.admit_type_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_description\n    ,cast(last_value(s.discharge_disposition_code) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_code\n    ,cast(last_value(s.discharge_disposition_description) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_description\n    ,cast(first_value(s.rendering_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as rendering_npi\n    ,cast(first_value(s.billing_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as billing_npi\n    ,cast(first_value(s.facility_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_npi\n    ,cast(first_value(s.facility_name) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_name\n    ,cast(first_value(s.ms_drg_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_code\n    ,cast(first_value(s.ms_drg_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_description\n    ,cast(c.paid_date as date) as paid_date\n    ,cast(c.paid_amount as numeric(38,2)) as paid_amount\n    ,cast(c.allowed_amount as numeric(38,2)) as allowed_amount\n    ,cast(c.charge_amount as numeric(38,2)) as charge_amount\n    ,cast(s.data_source as varchar) as data_source\nfrom encounter_stage s\ninner join encounter_combined c\n\ton s.encounter_id = c.encounter_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__encounter_prof_stage.sql", "original_file_path": "models/intermediate/claims_preprocessing__encounter_prof_stage.sql", "name": "claims_preprocessing__encounter_prof_stage", "alias": "encounter_prof_stage", "checksum": {"name": "sha256", "checksum": "5be97f5fdb367669853bb0918c98272e3c0147925666294a02c50e6048e9ef58"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_claim_line_stage"], ["claims_preprocessing__encounter_claim_line_stage"]], "sources": [], "metrics": [], "description": "Encounter level data elements for professional claims", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__encounter_prof_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_prof_stage", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1296883, "compiled_code": "-----------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details.\n-----------------------------------------------------------------------------------------------------\n-- Modification History\n--\n-- 07/2022  Thu Xuan Vu\n--      Changing acute inpatient mapping of professional claims to 'professional only acute inpatient'\n--        Downstream, a acute inpatient prof claim will link to an inst claim and the encounter type\n--        will be pulled from the inst claim.  But if a prof acute patient claim has no corresponding\n--        inst claim it's important to seperate out these orphaned prof claims to not over count \n--        inpatient visits.\n-----------------------------------------------------------------------------------------------------\n\n\nwith encounter_combined as(\n  select \n    encounter_id\n    ,min(claim_start_date) as encounter_start_date\n    ,max(claim_end_date) as encounter_end_date\n    ,min(admission_date) as admission_date\n    ,max(discharge_date) as discharge_date\n    ,max(paid_date) as paid_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(allowed_amount) as allowed_amount\n    ,sum(charge_amount) as charge_amount\n  from tuva.core.encounter_claim_line_stage mc\n  group by\n      encounter_id\n)\n, encounter_stage as(\n  select\n    mc.encounter_id\n    ,mc.patient_id\n    ,case \n        when mc.encounter_type = 'acute inpatient' \n            then 'professional only acute inpatient'\n                else mc.encounter_type\n    end as encounter_type\n    ,mc.admit_source_code\n    ,mc.admit_source_description\n    ,mc.admit_type_code\n    ,mc.admit_type_description\n    ,mc.discharge_disposition_code\n    ,mc.discharge_disposition_description\n    ,mc.rendering_npi\n    ,mc.billing_npi\n    ,mc.facility_npi\n    ,mc.facility_name\n    ,mc.ms_drg_code\n    ,mc.ms_drg_description\n    ,data_source\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_start_date) as row_sequence_first\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_end_date) as row_sequence_last\n  from tuva.core.encounter_claim_line_stage mc\n  where claim_type in ('professional','vision','dental')\n)\n\nselect distinct\n    cast(s.encounter_id as varchar) as encounter_id\n    ,cast(s.patient_id as varchar) as patient_id\n    ,cast(s.encounter_type as varchar) as encounter_type\n    ,cast(c.encounter_start_date as date) as encounter_start_date\n    ,cast(c.encounter_end_date as date) as encounter_end_date\n    ,cast(c.admission_date as date) as admission_date\n    ,cast(c.discharge_date as date) as discharge_date\n    ,cast(first_value(s.admit_source_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_code\n    ,cast(first_value(s.admit_source_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_description\n    ,cast(first_value(s.admit_type_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_code\n    ,cast(first_value(s.admit_type_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_description\n    ,cast(last_value(s.discharge_disposition_code) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_code\n    ,cast(last_value(s.discharge_disposition_description) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_description\n    ,cast(first_value(s.rendering_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as rendering_npi\n    ,cast(first_value(s.billing_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as billing_npi\n    ,cast(first_value(s.facility_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_npi\n    ,cast(first_value(s.facility_name) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_name\n    ,cast(first_value(s.ms_drg_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_code\n    ,cast(first_value(s.ms_drg_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_description\n    ,cast(c.paid_date as date) as paid_date\n    ,cast(c.paid_amount as numeric(38,2)) as paid_amount\n    ,cast(c.allowed_amount as numeric(38,2)) as allowed_amount\n    ,cast(c.charge_amount as numeric(38,2)) as charge_amount\n    ,cast(s.data_source as varchar) as data_source\nfrom encounter_stage s\ninner join encounter_combined c\n\ton s.encounter_id = c.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_prof_stage"}, "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"]}, "config": {"enabled": true, "alias": "inst_encounter_nonmerge", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_encounter_nonmerge"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      For merged claims only, determine encounter level data elements.\n-- Notes        Query is the same as inst_encounter_merge except it omits merged claims to create an encounter for non merged institutional claims.\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n---------------------------------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nselect\n    d.claim_id as encounter_id\n    ,d.patient_id as patient_id\n    ,d.encounter_type as encounter_type\n    ,min(d.claim_start_date) as encounter_start_date\n    ,max(d.claim_end_date) as encounter_end_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(charge_amount) as charge_amount\nfrom {{ ref('claims_preprocessing__encounter_type_union')}} d\nleft join {{ ref('claims_preprocessing__inst_merge_crosswalk')}} c\n    on d.claim_id = c.claim_id\nwhere d.claim_type = 'institutional'\nand c.claim_id is null\ngroup by \n  d.claim_id\n  ,d.patient_id\n  ,d.encounter_type", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_encounter_nonmerge.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_encounter_nonmerge.sql", "name": "claims_preprocessing__inst_encounter_nonmerge", "alias": "inst_encounter_nonmerge", "checksum": {"name": "sha256", "checksum": "12bda7017cca16aba3cb30db5f24c7c24758da3f9329bd598be1f870f0328b7e"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__inst_merge_crosswalk"]], "sources": [], "metrics": [], "description": "Crosswalk of claim ids to a master grouper (encounter id)", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_encounter_nonmerge.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_encounter_nonmerge", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1722975, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      For merged claims only, determine encounter level data elements.\n-- Notes        Query is the same as inst_encounter_merge except it omits merged claims to create an encounter for non merged institutional claims.\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n---------------------------------------------------------------------------------------------------------\n\n\nselect\n    d.claim_id as encounter_id\n    ,d.patient_id as patient_id\n    ,d.encounter_type as encounter_type\n    ,min(d.claim_start_date) as encounter_start_date\n    ,max(d.claim_end_date) as encounter_end_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(charge_amount) as charge_amount\nfrom tuva.core.encounter_type_union d\nleft join tuva.core.inst_merge_crosswalk c\n    on d.claim_id = c.claim_id\nwhere d.claim_type = 'institutional'\nand c.claim_id is null\ngroup by \n  d.claim_id\n  ,d.patient_id\n  ,d.encounter_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_encounter_nonmerge"}, "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.claims_preprocessing.claims_input.medical_claim", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__revenue_center", "seed.terminology.terminology__place_of_service", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"]}, "config": {"enabled": true, "alias": "encounter_claim_line_stage", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_claim_line_stage"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      A copy of the claims input layer with enhancements(terminology, merged claims, and encounter types).  This will power the core layer.\n-- Notes        Created this table to allow for validation and as an easier way to pass through claim fields from input layer to output layer.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--    Changed references of merge_claim_id to claim_id\n-- 11/01/2022 Thu Xuan Vu\n--    Updated table/model name to encounter_claim_line\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nselect \n  cast(m.claim_id as varchar) as claim_id\n  ,cast(m.claim_line_number as varchar) as claim_line_number\n  ,cast(m.claim_type as varchar) as claim_type\n  ,cast(c.encounter_id as varchar) as encounter_id\n  ,cast(e.encounter_type as varchar) as encounter_type\n  ,cast(m.patient_id as varchar) as patient_id\n  ,cast(m.member_id as varchar) as member_id\n  ,cast(m.claim_start_date as date) as claim_start_date\n  ,cast(m.claim_end_date as date) as claim_end_date\n  ,cast(m.claim_line_start_date as date) as claim_line_start_date\n  ,cast(m.claim_line_end_date as date) as claim_line_end_date\n  ,cast(m.admission_date as date) as admission_date\n  ,cast(m.discharge_date as date) as discharge_date\n  ,cast(m.admit_source_code as varchar) as admit_source_code\n  ,case when m.admit_type_code = '4' then cast(asrc.newborn_description as varchar) else cast(asrc.admit_source_description as varchar) end as admit_source_description\n  ,cast(m.admit_type_code as varchar) as admit_type_code\n  ,cast(at.admit_type_description as varchar) as admit_type_description\n  ,cast(m.discharge_disposition_code as varchar) as discharge_disposition_code\n  ,cast(dd.discharge_disposition_description as varchar) as discharge_disposition_description\n  ,cast(m.place_of_service_code as varchar) as place_of_service_code \n  ,cast(pos.place_of_service_description as varchar) as place_of_service_description\n  ,cast(m.bill_type_code as varchar) as bill_type_code\n  ,cast(null as varchar) as bill_type_description\n  ,cast(m.ms_drg_code as varchar) as ms_drg_code\n  ,cast(msdrg.ms_drg_description as varchar) as ms_drg_description\n  ,cast(m.revenue_center_code as varchar) as revenue_center_code\n  ,cast(rev.revenue_center_description as varchar) as revenue_center_description\n  ,cast(m.service_unit_quantity as int) as service_unit_quantity\n  ,cast(m.hcpcs_code as varchar) as hcpcs_code\n  ,cast(m.hcpcs_modifier_1 as varchar) as hcpcs_modifier_1\n  ,cast(m.hcpcs_modifier_2 as varchar) as hcpcs_modifier_2\n  ,cast(m.hcpcs_modifier_3 as varchar) as hcpcs_modifier_3\n  ,cast(m.hcpcs_modifier_4 as varchar) as hcpcs_modifier_4\n  ,cast(m.hcpcs_modifier_5 as varchar) as hcpcs_modifier_5\n  ,cast(m.rendering_npi as varchar) as rendering_npi\n  ,cast(m.billing_npi as varchar) as billing_npi\n  ,cast(m.facility_npi as varchar) as facility_npi\n  ,cast(NULL as varchar) as facility_name\n  ,cast(m.paid_date as date) as paid_date\n  ,cast(m.paid_amount as numeric(38,4)) as paid_amount\n  ,cast(m.allowed_amount as numeric(38,4)) as allowed_amount\n  ,cast(m.charge_amount as numeric(38,4)) as charge_amount\n  ,cast(m.diagnosis_code_1 as varchar) as diagnosis_code_1\n  ,cast(m.diagnosis_code_2 as varchar) as diagnosis_code_2\n  ,cast(m.diagnosis_code_3 as varchar) as diagnosis_code_3\n  ,cast(m.diagnosis_code_4 as varchar) as diagnosis_code_4\n  ,cast(m.diagnosis_code_5 as varchar) as diagnosis_code_5\n  ,cast(m.diagnosis_code_6 as varchar) as diagnosis_code_6\n  ,cast(m.diagnosis_code_7 as varchar) as diagnosis_code_7\n  ,cast(m.diagnosis_code_8 as varchar) as diagnosis_code_8\n  ,cast(m.diagnosis_code_9 as varchar) as diagnosis_code_9\n  ,cast(m.diagnosis_code_10 as varchar) as diagnosis_code_10\n  ,cast(m.diagnosis_code_11 as varchar) as diagnosis_code_11\n  ,cast(m.diagnosis_code_12 as varchar) as diagnosis_code_12\n  ,cast(m.diagnosis_code_13 as varchar) as diagnosis_code_13\n  ,cast(m.diagnosis_code_14 as varchar) as diagnosis_code_14\n  ,cast(m.diagnosis_code_15 as varchar) as diagnosis_code_15\n  ,cast(m.diagnosis_code_16 as varchar) as diagnosis_code_16\n  ,cast(m.diagnosis_code_17 as varchar) as diagnosis_code_17\n  ,cast(m.diagnosis_code_18 as varchar) as diagnosis_code_18\n  ,cast(m.diagnosis_code_19 as varchar) as diagnosis_code_19\n  ,cast(m.diagnosis_code_20 as varchar) as diagnosis_code_20\n  ,cast(m.diagnosis_code_21 as varchar) as diagnosis_code_21\n  ,cast(m.diagnosis_code_22 as varchar) as diagnosis_code_22\n  ,cast(m.diagnosis_code_23 as varchar) as diagnosis_code_23\n  ,cast(m.diagnosis_code_24 as varchar) as diagnosis_code_24\n  ,cast(m.diagnosis_code_25 as varchar) as diagnosis_code_25\n  ,cast(m.diagnosis_poa_1 as varchar) as diagnosis_poa_1\n  ,cast(m.diagnosis_poa_2 as varchar) as diagnosis_poa_2\n  ,cast(m.diagnosis_poa_3 as varchar) as diagnosis_poa_3\n  ,cast(m.diagnosis_poa_4 as varchar) as diagnosis_poa_4\n  ,cast(m.diagnosis_poa_5 as varchar) as diagnosis_poa_5\n  ,cast(m.diagnosis_poa_6 as varchar) as diagnosis_poa_6\n  ,cast(m.diagnosis_poa_7 as varchar) as diagnosis_poa_7\n  ,cast(m.diagnosis_poa_8 as varchar) as diagnosis_poa_8\n  ,cast(m.diagnosis_poa_9 as varchar) as diagnosis_poa_9\n  ,cast(m.diagnosis_poa_10 as varchar) as diagnosis_poa_10\n  ,cast(m.diagnosis_poa_11 as varchar) as diagnosis_poa_11\n  ,cast(m.diagnosis_poa_12 as varchar) as diagnosis_poa_12\n  ,cast(m.diagnosis_poa_13 as varchar) as diagnosis_poa_13\n  ,cast(m.diagnosis_poa_14 as varchar) as diagnosis_poa_14\n  ,cast(m.diagnosis_poa_15 as varchar) as diagnosis_poa_15\n  ,cast(m.diagnosis_poa_16 as varchar) as diagnosis_poa_16\n  ,cast(m.diagnosis_poa_17 as varchar) as diagnosis_poa_17\n  ,cast(m.diagnosis_poa_18 as varchar) as diagnosis_poa_18\n  ,cast(m.diagnosis_poa_19 as varchar) as diagnosis_poa_19\n  ,cast(m.diagnosis_poa_20 as varchar) as diagnosis_poa_20\n  ,cast(m.diagnosis_poa_21 as varchar) as diagnosis_poa_21\n  ,cast(m.diagnosis_poa_22 as varchar) as diagnosis_poa_22\n  ,cast(m.diagnosis_poa_23 as varchar) as diagnosis_poa_23\n  ,cast(m.diagnosis_poa_24 as varchar) as diagnosis_poa_24\n  ,cast(m.diagnosis_poa_25 as varchar) as diagnosis_poa_25\n  ,cast(m.diagnosis_code_type as varchar) as diagnosis_code_type\n  ,cast(m.procedure_code_type as varchar) as procedure_code_type\n  ,cast(m.procedure_code_1 as varchar) as procedure_code_1\n  ,cast(m.procedure_code_2 as varchar) as procedure_code_2\n  ,cast(m.procedure_code_3 as varchar) as procedure_code_3\n  ,cast(m.procedure_code_4 as varchar) as procedure_code_4\n  ,cast(m.procedure_code_5 as varchar) as procedure_code_5\n  ,cast(m.procedure_code_6 as varchar) as procedure_code_6\n  ,cast(m.procedure_code_7 as varchar) as procedure_code_7\n  ,cast(m.procedure_code_8 as varchar) as procedure_code_8\n  ,cast(m.procedure_code_9 as varchar) as procedure_code_9\n  ,cast(m.procedure_code_10 as varchar) as procedure_code_10\n  ,cast(m.procedure_code_11 as varchar) as procedure_code_11\n  ,cast(m.procedure_code_12 as varchar) as procedure_code_12\n  ,cast(m.procedure_code_13 as varchar) as procedure_code_13\n  ,cast(m.procedure_code_14 as varchar) as procedure_code_14\n  ,cast(m.procedure_code_15 as varchar) as procedure_code_15\n  ,cast(m.procedure_code_16 as varchar) as procedure_code_16\n  ,cast(m.procedure_code_17 as varchar) as procedure_code_17\n  ,cast(m.procedure_code_18 as varchar) as procedure_code_18\n  ,cast(m.procedure_code_19 as varchar) as procedure_code_19\n  ,cast(m.procedure_code_20 as varchar) as procedure_code_20\n  ,cast(m.procedure_code_21 as varchar) as procedure_code_21\n  ,cast(m.procedure_code_22 as varchar) as procedure_code_22\n  ,cast(m.procedure_code_23 as varchar) as procedure_code_23\n  ,cast(m.procedure_code_24 as varchar) as procedure_code_24\n  ,cast(m.procedure_code_25 as varchar) as procedure_code_25\n  ,cast(m.procedure_date_1 as varchar) as procedure_date_1\n  ,cast(m.procedure_date_2 as varchar) as procedure_date_2\n  ,cast(m.procedure_date_3 as varchar) as procedure_date_3\n  ,cast(m.procedure_date_4 as varchar) as procedure_date_4\n  ,cast(m.procedure_date_5 as varchar) as procedure_date_5\n  ,cast(m.procedure_date_6 as varchar) as procedure_date_6\n  ,cast(m.procedure_date_7 as varchar) as procedure_date_7\n  ,cast(m.procedure_date_8 as varchar) as procedure_date_8\n  ,cast(m.procedure_date_9 as varchar) as procedure_date_9\n  ,cast(m.procedure_date_10 as varchar) as procedure_date_10\n  ,cast(m.procedure_date_11 as varchar) as procedure_date_11\n  ,cast(m.procedure_date_12 as varchar) as procedure_date_12\n  ,cast(m.procedure_date_13 as varchar) as procedure_date_13\n  ,cast(m.procedure_date_14 as varchar) as procedure_date_14\n  ,cast(m.procedure_date_15 as varchar) as procedure_date_15\n  ,cast(m.procedure_date_16 as varchar) as procedure_date_16\n  ,cast(m.procedure_date_17 as varchar) as procedure_date_17\n  ,cast(m.procedure_date_18 as varchar) as procedure_date_18\n  ,cast(m.procedure_date_19 as varchar) as procedure_date_19\n  ,cast(m.procedure_date_20 as varchar) as procedure_date_20\n  ,cast(m.procedure_date_21 as varchar) as procedure_date_21\n  ,cast(m.procedure_date_22 as varchar) as procedure_date_22\n  ,cast(m.procedure_date_23 as varchar) as procedure_date_23\n  ,cast(m.procedure_date_24 as varchar) as procedure_date_24\n  ,cast(m.procedure_date_25 as varchar) as procedure_date_25\n  ,cast(data_source as varchar) as data_source\nfrom {{ var('medical_claim')}} m\ninner join {{ ref('claims_preprocessing__encounter_type_union')}} e\n\ton m.claim_id = e.claim_id\ninner join {{ ref('claims_preprocessing__encounter_claim_crosswalk')}} c\n\ton e.claim_id = c.claim_id\nleft join {{ ref('terminology__admit_type')}} at\n\ton m.admit_type_code = at.admit_type_code\nleft join {{ ref('terminology__admit_source')}} asrc\n\ton m.admit_source_code = asrc.admit_source_code\nleft join {{ ref('terminology__revenue_center')}} rev\n\ton m.revenue_center_code = rev.revenue_center_code\nleft join {{ ref('terminology__place_of_service')}} pos\n\ton m.place_of_service_code = pos.place_of_service_code\nleft join {{ ref('terminology__discharge_disposition')}} dd\n\ton m.discharge_disposition_code = dd.discharge_disposition_code\nleft join {{ ref('terminology__ms_drg')}} msdrg\n\ton m.ms_drg_code = msdrg.ms_drg_code\nwhere ifnull(m.revenue_center_code,'') <> '0001'", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__encounter_claim_line_stage.sql", "original_file_path": "models/intermediate/claims_preprocessing__encounter_claim_line_stage.sql", "name": "claims_preprocessing__encounter_claim_line_stage", "alias": "encounter_claim_line_stage", "checksum": {"name": "sha256", "checksum": "368d3b6819f53083c7396fdf5d337c8c016b59d3b530c779f6cec8d3ad1e36e3"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__encounter_claim_crosswalk"], ["terminology__admit_type"], ["terminology__admit_source"], ["terminology__revenue_center"], ["terminology__place_of_service"], ["terminology__discharge_disposition"], ["terminology__ms_drg"]], "sources": [["claims_input", "medical_claim"]], "metrics": [], "description": "Claim line level detail", "columns": {"patient_id": {"name": "patient_id", "description": "unique identifier", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__encounter_claim_line_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_claim_line_stage", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1162117, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      A copy of the claims input layer with enhancements(terminology, merged claims, and encounter types).  This will power the core layer.\n-- Notes        Created this table to allow for validation and as an easier way to pass through claim fields from input layer to output layer.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--    Changed references of merge_claim_id to claim_id\n-- 11/01/2022 Thu Xuan Vu\n--    Updated table/model name to encounter_claim_line\n-------------------------------------------------------------------------------\n\n\nselect \n  cast(m.claim_id as varchar) as claim_id\n  ,cast(m.claim_line_number as varchar) as claim_line_number\n  ,cast(m.claim_type as varchar) as claim_type\n  ,cast(c.encounter_id as varchar) as encounter_id\n  ,cast(e.encounter_type as varchar) as encounter_type\n  ,cast(m.patient_id as varchar) as patient_id\n  ,cast(m.member_id as varchar) as member_id\n  ,cast(m.claim_start_date as date) as claim_start_date\n  ,cast(m.claim_end_date as date) as claim_end_date\n  ,cast(m.claim_line_start_date as date) as claim_line_start_date\n  ,cast(m.claim_line_end_date as date) as claim_line_end_date\n  ,cast(m.admission_date as date) as admission_date\n  ,cast(m.discharge_date as date) as discharge_date\n  ,cast(m.admit_source_code as varchar) as admit_source_code\n  ,case when m.admit_type_code = '4' then cast(asrc.newborn_description as varchar) else cast(asrc.admit_source_description as varchar) end as admit_source_description\n  ,cast(m.admit_type_code as varchar) as admit_type_code\n  ,cast(at.admit_type_description as varchar) as admit_type_description\n  ,cast(m.discharge_disposition_code as varchar) as discharge_disposition_code\n  ,cast(dd.discharge_disposition_description as varchar) as discharge_disposition_description\n  ,cast(m.place_of_service_code as varchar) as place_of_service_code \n  ,cast(pos.place_of_service_description as varchar) as place_of_service_description\n  ,cast(m.bill_type_code as varchar) as bill_type_code\n  ,cast(null as varchar) as bill_type_description\n  ,cast(m.ms_drg_code as varchar) as ms_drg_code\n  ,cast(msdrg.ms_drg_description as varchar) as ms_drg_description\n  ,cast(m.revenue_center_code as varchar) as revenue_center_code\n  ,cast(rev.revenue_center_description as varchar) as revenue_center_description\n  ,cast(m.service_unit_quantity as int) as service_unit_quantity\n  ,cast(m.hcpcs_code as varchar) as hcpcs_code\n  ,cast(m.hcpcs_modifier_1 as varchar) as hcpcs_modifier_1\n  ,cast(m.hcpcs_modifier_2 as varchar) as hcpcs_modifier_2\n  ,cast(m.hcpcs_modifier_3 as varchar) as hcpcs_modifier_3\n  ,cast(m.hcpcs_modifier_4 as varchar) as hcpcs_modifier_4\n  ,cast(m.hcpcs_modifier_5 as varchar) as hcpcs_modifier_5\n  ,cast(m.rendering_npi as varchar) as rendering_npi\n  ,cast(m.billing_npi as varchar) as billing_npi\n  ,cast(m.facility_npi as varchar) as facility_npi\n  ,cast(NULL as varchar) as facility_name\n  ,cast(m.paid_date as date) as paid_date\n  ,cast(m.paid_amount as numeric(38,4)) as paid_amount\n  ,cast(m.allowed_amount as numeric(38,4)) as allowed_amount\n  ,cast(m.charge_amount as numeric(38,4)) as charge_amount\n  ,cast(m.diagnosis_code_1 as varchar) as diagnosis_code_1\n  ,cast(m.diagnosis_code_2 as varchar) as diagnosis_code_2\n  ,cast(m.diagnosis_code_3 as varchar) as diagnosis_code_3\n  ,cast(m.diagnosis_code_4 as varchar) as diagnosis_code_4\n  ,cast(m.diagnosis_code_5 as varchar) as diagnosis_code_5\n  ,cast(m.diagnosis_code_6 as varchar) as diagnosis_code_6\n  ,cast(m.diagnosis_code_7 as varchar) as diagnosis_code_7\n  ,cast(m.diagnosis_code_8 as varchar) as diagnosis_code_8\n  ,cast(m.diagnosis_code_9 as varchar) as diagnosis_code_9\n  ,cast(m.diagnosis_code_10 as varchar) as diagnosis_code_10\n  ,cast(m.diagnosis_code_11 as varchar) as diagnosis_code_11\n  ,cast(m.diagnosis_code_12 as varchar) as diagnosis_code_12\n  ,cast(m.diagnosis_code_13 as varchar) as diagnosis_code_13\n  ,cast(m.diagnosis_code_14 as varchar) as diagnosis_code_14\n  ,cast(m.diagnosis_code_15 as varchar) as diagnosis_code_15\n  ,cast(m.diagnosis_code_16 as varchar) as diagnosis_code_16\n  ,cast(m.diagnosis_code_17 as varchar) as diagnosis_code_17\n  ,cast(m.diagnosis_code_18 as varchar) as diagnosis_code_18\n  ,cast(m.diagnosis_code_19 as varchar) as diagnosis_code_19\n  ,cast(m.diagnosis_code_20 as varchar) as diagnosis_code_20\n  ,cast(m.diagnosis_code_21 as varchar) as diagnosis_code_21\n  ,cast(m.diagnosis_code_22 as varchar) as diagnosis_code_22\n  ,cast(m.diagnosis_code_23 as varchar) as diagnosis_code_23\n  ,cast(m.diagnosis_code_24 as varchar) as diagnosis_code_24\n  ,cast(m.diagnosis_code_25 as varchar) as diagnosis_code_25\n  ,cast(m.diagnosis_poa_1 as varchar) as diagnosis_poa_1\n  ,cast(m.diagnosis_poa_2 as varchar) as diagnosis_poa_2\n  ,cast(m.diagnosis_poa_3 as varchar) as diagnosis_poa_3\n  ,cast(m.diagnosis_poa_4 as varchar) as diagnosis_poa_4\n  ,cast(m.diagnosis_poa_5 as varchar) as diagnosis_poa_5\n  ,cast(m.diagnosis_poa_6 as varchar) as diagnosis_poa_6\n  ,cast(m.diagnosis_poa_7 as varchar) as diagnosis_poa_7\n  ,cast(m.diagnosis_poa_8 as varchar) as diagnosis_poa_8\n  ,cast(m.diagnosis_poa_9 as varchar) as diagnosis_poa_9\n  ,cast(m.diagnosis_poa_10 as varchar) as diagnosis_poa_10\n  ,cast(m.diagnosis_poa_11 as varchar) as diagnosis_poa_11\n  ,cast(m.diagnosis_poa_12 as varchar) as diagnosis_poa_12\n  ,cast(m.diagnosis_poa_13 as varchar) as diagnosis_poa_13\n  ,cast(m.diagnosis_poa_14 as varchar) as diagnosis_poa_14\n  ,cast(m.diagnosis_poa_15 as varchar) as diagnosis_poa_15\n  ,cast(m.diagnosis_poa_16 as varchar) as diagnosis_poa_16\n  ,cast(m.diagnosis_poa_17 as varchar) as diagnosis_poa_17\n  ,cast(m.diagnosis_poa_18 as varchar) as diagnosis_poa_18\n  ,cast(m.diagnosis_poa_19 as varchar) as diagnosis_poa_19\n  ,cast(m.diagnosis_poa_20 as varchar) as diagnosis_poa_20\n  ,cast(m.diagnosis_poa_21 as varchar) as diagnosis_poa_21\n  ,cast(m.diagnosis_poa_22 as varchar) as diagnosis_poa_22\n  ,cast(m.diagnosis_poa_23 as varchar) as diagnosis_poa_23\n  ,cast(m.diagnosis_poa_24 as varchar) as diagnosis_poa_24\n  ,cast(m.diagnosis_poa_25 as varchar) as diagnosis_poa_25\n  ,cast(m.diagnosis_code_type as varchar) as diagnosis_code_type\n  ,cast(m.procedure_code_type as varchar) as procedure_code_type\n  ,cast(m.procedure_code_1 as varchar) as procedure_code_1\n  ,cast(m.procedure_code_2 as varchar) as procedure_code_2\n  ,cast(m.procedure_code_3 as varchar) as procedure_code_3\n  ,cast(m.procedure_code_4 as varchar) as procedure_code_4\n  ,cast(m.procedure_code_5 as varchar) as procedure_code_5\n  ,cast(m.procedure_code_6 as varchar) as procedure_code_6\n  ,cast(m.procedure_code_7 as varchar) as procedure_code_7\n  ,cast(m.procedure_code_8 as varchar) as procedure_code_8\n  ,cast(m.procedure_code_9 as varchar) as procedure_code_9\n  ,cast(m.procedure_code_10 as varchar) as procedure_code_10\n  ,cast(m.procedure_code_11 as varchar) as procedure_code_11\n  ,cast(m.procedure_code_12 as varchar) as procedure_code_12\n  ,cast(m.procedure_code_13 as varchar) as procedure_code_13\n  ,cast(m.procedure_code_14 as varchar) as procedure_code_14\n  ,cast(m.procedure_code_15 as varchar) as procedure_code_15\n  ,cast(m.procedure_code_16 as varchar) as procedure_code_16\n  ,cast(m.procedure_code_17 as varchar) as procedure_code_17\n  ,cast(m.procedure_code_18 as varchar) as procedure_code_18\n  ,cast(m.procedure_code_19 as varchar) as procedure_code_19\n  ,cast(m.procedure_code_20 as varchar) as procedure_code_20\n  ,cast(m.procedure_code_21 as varchar) as procedure_code_21\n  ,cast(m.procedure_code_22 as varchar) as procedure_code_22\n  ,cast(m.procedure_code_23 as varchar) as procedure_code_23\n  ,cast(m.procedure_code_24 as varchar) as procedure_code_24\n  ,cast(m.procedure_code_25 as varchar) as procedure_code_25\n  ,cast(m.procedure_date_1 as varchar) as procedure_date_1\n  ,cast(m.procedure_date_2 as varchar) as procedure_date_2\n  ,cast(m.procedure_date_3 as varchar) as procedure_date_3\n  ,cast(m.procedure_date_4 as varchar) as procedure_date_4\n  ,cast(m.procedure_date_5 as varchar) as procedure_date_5\n  ,cast(m.procedure_date_6 as varchar) as procedure_date_6\n  ,cast(m.procedure_date_7 as varchar) as procedure_date_7\n  ,cast(m.procedure_date_8 as varchar) as procedure_date_8\n  ,cast(m.procedure_date_9 as varchar) as procedure_date_9\n  ,cast(m.procedure_date_10 as varchar) as procedure_date_10\n  ,cast(m.procedure_date_11 as varchar) as procedure_date_11\n  ,cast(m.procedure_date_12 as varchar) as procedure_date_12\n  ,cast(m.procedure_date_13 as varchar) as procedure_date_13\n  ,cast(m.procedure_date_14 as varchar) as procedure_date_14\n  ,cast(m.procedure_date_15 as varchar) as procedure_date_15\n  ,cast(m.procedure_date_16 as varchar) as procedure_date_16\n  ,cast(m.procedure_date_17 as varchar) as procedure_date_17\n  ,cast(m.procedure_date_18 as varchar) as procedure_date_18\n  ,cast(m.procedure_date_19 as varchar) as procedure_date_19\n  ,cast(m.procedure_date_20 as varchar) as procedure_date_20\n  ,cast(m.procedure_date_21 as varchar) as procedure_date_21\n  ,cast(m.procedure_date_22 as varchar) as procedure_date_22\n  ,cast(m.procedure_date_23 as varchar) as procedure_date_23\n  ,cast(m.procedure_date_24 as varchar) as procedure_date_24\n  ,cast(m.procedure_date_25 as varchar) as procedure_date_25\n  ,cast(data_source as varchar) as data_source\nfrom tuva.claims_input.medical_claim m\ninner join tuva.core.encounter_type_union e\n\ton m.claim_id = e.claim_id\ninner join tuva.core.encounter_claim_crosswalk c\n\ton e.claim_id = c.claim_id\nleft join tuva.terminology.admit_type at\n\ton m.admit_type_code = at.admit_type_code\nleft join tuva.terminology.admit_source asrc\n\ton m.admit_source_code = asrc.admit_source_code\nleft join tuva.terminology.revenue_center rev\n\ton m.revenue_center_code = rev.revenue_center_code\nleft join tuva.terminology.place_of_service pos\n\ton m.place_of_service_code = pos.place_of_service_code\nleft join tuva.terminology.discharge_disposition dd\n\ton m.discharge_disposition_code = dd.discharge_disposition_code\nleft join tuva.terminology.ms_drg msdrg\n\ton m.ms_drg_code = msdrg.ms_drg_code\nwhere ifnull(m.revenue_center_code,'') <> '0001'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_claim_line_stage"}, "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": "prof_inst_encounter_crosswalk", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__prof_inst_encounter_crosswalk"], "unique_id": "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Crosswalk professional claims to existing institutional encounter.  Matches occur for the same patient, the same encounter type, and overlapping dates.\n-- Notes        Ambigous matches are when a prof claim links to more than one inst encounter.  These claims are omitted.\n--              An example:  An ED prof claim links to two ED inst encounters. The end of one inst encounter is the start of another but they were not merged due to different\n--                  facility NPIs.  Since no other data can help determine which inst encounter the prof claim belongs to, it is not crosswalked.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith prof_inst_encounter_crosswalk as(\n  select \n      f.encounter_id\n      ,f.patient_id\n      ,f.encounter_type\n      ,f.encounter_start_date\n      ,f.encounter_end_date\n      ,d.claim_id\n      ,d.claim_start_date\n      ,d.claim_end_date\n      ,d.encounter_type\n      ,case\n          when f.encounter_type = 'acute inpatient' and d.encounter_type = 'acute inpatient'\n              then 1\n          when f.encounter_type = 'hospice ' and d.encounter_type = 'hospice'\n              then 1\n          when f.encounter_type = 'home health' and d.encounter_type = 'home health'\n              then 1\n          when f.encounter_type = 'skilled nursing facility' and d.encounter_type = 'skilled nursing facility'\n              then 1\n          when f.encounter_type = 'ambulatory surgical center' and d.encounter_type = 'ambulatory surgical center'\n              then 1\n          when f.encounter_type = 'dialysis center' and d.encounter_type = 'dialysis center'\n              then 1\n          when f.encounter_type = 'mental health center' and d.encounter_type = 'mental health center'\n              then 1\n          when f.encounter_type = 'emergency department' and d.encounter_type = 'emergency department'\n              then 1\n          when f.encounter_type = 'outpatient rehabilitation' and d.encounter_type = 'outpatient rehabilitation'\n              then 1\n          when f.encounter_type = 'outpatient' and d.encounter_type = 'outpatient'\n              then 1\n                  else 0\n       end as link_flag\n  from {{ ref('claims_preprocessing__inst_encounter_final')}} f\n  inner join {{ ref('claims_preprocessing__encounter_type_union')}} d\n      on d.patient_id = f.patient_id\n      and d.claim_start_date >= f.encounter_start_date\n      and d.claim_start_date <= f.encounter_end_date\n  where d.claim_type = 'professional'\n\n  )\n, ambigous_match as(\n  select \n  \tclaim_id\n  from prof_inst_encounter_crosswalk\n  where link_flag = 1\n  group by claim_id\n  having count(*) > 1\n)\n\nselect \n\tencounter_id\n    ,c.claim_id\n    ,c.patient_id\nfrom prof_inst_encounter_crosswalk c\nleft join ambigous_match a\n\ton c.claim_id = a.claim_id\nwhere a.claim_id is null\nand c.link_flag = 1", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__prof_inst_encounter_crosswalk.sql", "original_file_path": "models/intermediate/claims_preprocessing__prof_inst_encounter_crosswalk.sql", "name": "claims_preprocessing__prof_inst_encounter_crosswalk", "alias": "prof_inst_encounter_crosswalk", "checksum": {"name": "sha256", "checksum": "9603ba7b6523ba4c6767af9a1cb0f1820a136c1ef2da865f96c01d687fa91e3c"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__inst_encounter_final"], ["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "List of institutional claims pairs that are eligable for merging.", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__prof_inst_encounter_crosswalk.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "prof_inst_encounter_crosswalk", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.2005517, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Crosswalk professional claims to existing institutional encounter.  Matches occur for the same patient, the same encounter type, and overlapping dates.\n-- Notes        Ambigous matches are when a prof claim links to more than one inst encounter.  These claims are omitted.\n--              An example:  An ED prof claim links to two ED inst encounters. The end of one inst encounter is the start of another but they were not merged due to different\n--                  facility NPIs.  Since no other data can help determine which inst encounter the prof claim belongs to, it is not crosswalked.\n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-------------------------------------------------------------------------------\n\n\nwith prof_inst_encounter_crosswalk as(\n  select \n      f.encounter_id\n      ,f.patient_id\n      ,f.encounter_type\n      ,f.encounter_start_date\n      ,f.encounter_end_date\n      ,d.claim_id\n      ,d.claim_start_date\n      ,d.claim_end_date\n      ,d.encounter_type\n      ,case\n          when f.encounter_type = 'acute inpatient' and d.encounter_type = 'acute inpatient'\n              then 1\n          when f.encounter_type = 'hospice ' and d.encounter_type = 'hospice'\n              then 1\n          when f.encounter_type = 'home health' and d.encounter_type = 'home health'\n              then 1\n          when f.encounter_type = 'skilled nursing facility' and d.encounter_type = 'skilled nursing facility'\n              then 1\n          when f.encounter_type = 'ambulatory surgical center' and d.encounter_type = 'ambulatory surgical center'\n              then 1\n          when f.encounter_type = 'dialysis center' and d.encounter_type = 'dialysis center'\n              then 1\n          when f.encounter_type = 'mental health center' and d.encounter_type = 'mental health center'\n              then 1\n          when f.encounter_type = 'emergency department' and d.encounter_type = 'emergency department'\n              then 1\n          when f.encounter_type = 'outpatient rehabilitation' and d.encounter_type = 'outpatient rehabilitation'\n              then 1\n          when f.encounter_type = 'outpatient' and d.encounter_type = 'outpatient'\n              then 1\n                  else 0\n       end as link_flag\n  from tuva.core.inst_encounter_final f\n  inner join tuva.core.encounter_type_union d\n      on d.patient_id = f.patient_id\n      and d.claim_start_date >= f.encounter_start_date\n      and d.claim_start_date <= f.encounter_end_date\n  where d.claim_type = 'professional'\n\n  )\n, ambigous_match as(\n  select \n  \tclaim_id\n  from prof_inst_encounter_crosswalk\n  where link_flag = 1\n  group by claim_id\n  having count(*) > 1\n)\n\nselect \n\tencounter_id\n    ,c.claim_id\n    ,c.patient_id\nfrom prof_inst_encounter_crosswalk c\nleft join ambigous_match a\n\ton c.claim_id = a.claim_id\nwhere a.claim_id is null\nand c.link_flag = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.prof_inst_encounter_crosswalk"}, "model.claims_preprocessing.claims_preprocessing__inst_merge_final": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage", "model.claims_preprocessing.claims_preprocessing__inst_merge_stage"]}, "config": {"enabled": true, "alias": "inst_merge_final", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_merge_final"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_merge_final", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Find the start of a claim pair set to use as the anchor in a recrusive CTE and add the anchor back to the list of claim pairs.\n-- Notes        The output of inst_merge_stage is a list of claims that are to be paired:  Claim A to B, Claim B to C, Claim C to D, Claim S to T.\n--              To group pairs under one umbrella, a recurisve CTE is used to link Claim A down to Claim D.  An anchor tells the recursion when a pair set starts.\n--              Claim A and Claim S will be pulled out as the anchors and then union'd with the original data set.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n {{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith master_claim_id as(\n    select \n        lag(claim_id_b,1) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim\n        ,patient_id\n        ,merge_criteria\n        ,claim_id_a\n        ,claim_id_b\n        ,encounter_type\n        ,previous_claim_start_date\n        ,previous_claim_end_date\n        ,claim_start_date\n        ,claim_end_date\n        ,previous_facility_npi\n        ,facility_npi\n        ,previous_discharge_disposition_code\n        ,discharge_disposition_code\n    from {{ ref('claims_preprocessing__inst_merge_stage')}}\n)\n\nselect \n    cast(patient_id as varchar) as patient_id\n    ,cast('anchor' as varchar) as merge_criteria\n    ,cast(claim_id_a as varchar) as claim_id_a\n    ,cast(NULL as varchar) as claim_id_b\n    ,cast(encounter_type as varchar) as encounter_type\n    ,cast(NULL as date) as previous_claim_start_date\n    ,cast(NULL as date) as previous_claim_end_date\n    ,cast(previous_claim_start_date as date) as claim_start_date\n    ,cast(previous_claim_end_date as date) as claim_end_date\n    ,cast(previous_facility_npi as varchar) as previous_facility_npi\n    ,cast(facility_npi as varchar) as facility_npi\n    ,cast(previous_discharge_disposition_code as varchar) as previous_discharge_disposition_code\n    ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\nfrom master_claim_id\nwhere ifnull(previous_claim, 'start') <> claim_id_a\n\nunion all \n\nselect \n\tcast(patient_id as varchar) as patient_id\n    ,cast(merge_criteria as varchar) as merge_criteria\n    ,cast(claim_id_a as varchar) as claim_id_a\n    ,cast(claim_id_b as varchar) as claim_id_b\n    ,cast(encounter_type as varchar) as encounter_type\n    ,cast(previous_claim_start_date as date) as previous_claim_start_date\n    ,cast(previous_claim_end_date as date) as previous_claim_end_date\n    ,cast(claim_start_date as date) as claim_start_date\n    ,cast(claim_end_date as date) as claim_end_date\n    ,cast(previous_facility_npi as varchar) as previous_facility_npi\n    ,cast(facility_npi as varchar) as facility_npi\n    ,cast(previous_discharge_disposition_code as varchar) as previous_discharge_disposition_code\n    ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\n from {{ ref('claims_preprocessing__inst_merge_stage')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_merge_final.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_merge_final.sql", "name": "claims_preprocessing__inst_merge_final", "alias": "inst_merge_final", "checksum": {"name": "sha256", "checksum": "3a59fbfdad33115cc0a8bd9b8deb7835d28e959351fb2f0cbf9ba58825a5cf49"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__inst_merge_stage"], ["claims_preprocessing__inst_merge_stage"]], "sources": [], "metrics": [], "description": "Encounter details", "columns": {"claim_id_a": {"name": "claim_id_a", "description": "One claim in a pair that are part of the same encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_id_b": {"name": "claim_id_b", "description": "One claim in a pair that are part of the same encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_merge_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_merge_final", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1863363, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Find the start of a claim pair set to use as the anchor in a recrusive CTE and add the anchor back to the list of claim pairs.\n-- Notes        The output of inst_merge_stage is a list of claims that are to be paired:  Claim A to B, Claim B to C, Claim C to D, Claim S to T.\n--              To group pairs under one umbrella, a recurisve CTE is used to link Claim A down to Claim D.  An anchor tells the recursion when a pair set starts.\n--              Claim A and Claim S will be pulled out as the anchors and then union'd with the original data set.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n \n\nwith master_claim_id as(\n    select \n        lag(claim_id_b,1) over (partition by patient_id, encounter_type order by row_sequence) as previous_claim\n        ,patient_id\n        ,merge_criteria\n        ,claim_id_a\n        ,claim_id_b\n        ,encounter_type\n        ,previous_claim_start_date\n        ,previous_claim_end_date\n        ,claim_start_date\n        ,claim_end_date\n        ,previous_facility_npi\n        ,facility_npi\n        ,previous_discharge_disposition_code\n        ,discharge_disposition_code\n    from tuva.core.inst_merge_stage\n)\n\nselect \n    cast(patient_id as varchar) as patient_id\n    ,cast('anchor' as varchar) as merge_criteria\n    ,cast(claim_id_a as varchar) as claim_id_a\n    ,cast(NULL as varchar) as claim_id_b\n    ,cast(encounter_type as varchar) as encounter_type\n    ,cast(NULL as date) as previous_claim_start_date\n    ,cast(NULL as date) as previous_claim_end_date\n    ,cast(previous_claim_start_date as date) as claim_start_date\n    ,cast(previous_claim_end_date as date) as claim_end_date\n    ,cast(previous_facility_npi as varchar) as previous_facility_npi\n    ,cast(facility_npi as varchar) as facility_npi\n    ,cast(previous_discharge_disposition_code as varchar) as previous_discharge_disposition_code\n    ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\nfrom master_claim_id\nwhere ifnull(previous_claim, 'start') <> claim_id_a\n\nunion all \n\nselect \n\tcast(patient_id as varchar) as patient_id\n    ,cast(merge_criteria as varchar) as merge_criteria\n    ,cast(claim_id_a as varchar) as claim_id_a\n    ,cast(claim_id_b as varchar) as claim_id_b\n    ,cast(encounter_type as varchar) as encounter_type\n    ,cast(previous_claim_start_date as date) as previous_claim_start_date\n    ,cast(previous_claim_end_date as date) as previous_claim_end_date\n    ,cast(claim_start_date as date) as claim_start_date\n    ,cast(claim_end_date as date) as claim_end_date\n    ,cast(previous_facility_npi as varchar) as previous_facility_npi\n    ,cast(facility_npi as varchar) as facility_npi\n    ,cast(previous_discharge_disposition_code as varchar) as previous_discharge_disposition_code\n    ,cast(discharge_disposition_code as varchar) as discharge_disposition_code\n from tuva.core.inst_merge_stage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_merge_final"}, "model.claims_preprocessing.claims_preprocessing__inst_encounter_final": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"]}, "config": {"enabled": true, "alias": "inst_encounter_final", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_encounter_final"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_encounter_final", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Bring together encounters for merged and nonmerged institutional claims.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nselect\n   cast(encounter_id as varchar) as encounter_id\n   ,cast(patient_id as varchar) as patient_id\n   ,cast(encounter_type as varchar) as encounter_type\n   ,cast(encounter_start_date as date) as encounter_start_date\n   ,cast(encounter_end_date as date) as encounter_end_date\n   ,cast(paid_amount as numeric(38,2)) as paid_amount\n   ,cast(charge_amount as numeric(38,2)) as charge_amount\nfrom {{ ref('claims_preprocessing__inst_encounter_merge')}}\n\nunion all\n\nselect\n   cast(encounter_id as varchar) as encounter_id\n   ,cast(patient_id as varchar) as patient_id\n   ,cast(encounter_type as varchar) as encounter_type\n   ,cast(encounter_start_date as date) as encounter_start_date\n   ,cast(encounter_end_date as date) as encounter_end_date\n   ,cast(paid_amount as numeric(38,2)) as paid_amount\n   ,cast(charge_amount as numeric(38,2)) as charge_amount\nfrom {{ ref('claims_preprocessing__inst_encounter_nonmerge')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_encounter_final.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_encounter_final.sql", "name": "claims_preprocessing__inst_encounter_final", "alias": "inst_encounter_final", "checksum": {"name": "sha256", "checksum": "318cbfda4c49e3b78ca30f43f9e97300a7b5ba4963df5cb69d7b59b92701ad8f"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__inst_encounter_merge"], ["claims_preprocessing__inst_encounter_nonmerge"]], "sources": [], "metrics": [], "description": "All encounters for institutional claims.", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifer and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_encounter_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_encounter_final", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.158821, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Bring together encounters for merged and nonmerged institutional claims.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\nselect\n   cast(encounter_id as varchar) as encounter_id\n   ,cast(patient_id as varchar) as patient_id\n   ,cast(encounter_type as varchar) as encounter_type\n   ,cast(encounter_start_date as date) as encounter_start_date\n   ,cast(encounter_end_date as date) as encounter_end_date\n   ,cast(paid_amount as numeric(38,2)) as paid_amount\n   ,cast(charge_amount as numeric(38,2)) as charge_amount\nfrom tuva.core.inst_encounter_merge\n\nunion all\n\nselect\n   cast(encounter_id as varchar) as encounter_id\n   ,cast(patient_id as varchar) as patient_id\n   ,cast(encounter_type as varchar) as encounter_type\n   ,cast(encounter_start_date as date) as encounter_start_date\n   ,cast(encounter_end_date as date) as encounter_end_date\n   ,cast(paid_amount as numeric(38,2)) as paid_amount\n   ,cast(charge_amount as numeric(38,2)) as charge_amount\nfrom tuva.core.inst_encounter_nonmerge", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_encounter_final"}, "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_final", "model.claims_preprocessing.claims_preprocessing__inst_merge_final"]}, "config": {"enabled": true, "alias": "inst_merge_crosswalk", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_merge_crosswalk"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Use recursion to umbrella claim pairs under one id.\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith recursive stage (patient_id, group_claim_id, claim_id, depth) as(\n    select\n        patient_id\n        ,claim_id_a as group_claim_id\n        , claim_id_a as claim_id\n        , 1 as depth\n    from {{ ref('claims_preprocessing__inst_merge_final')}}\n    where claim_id_b is null\n\nunion all\n  \n    select\n        a.patient_id\n        ,s.group_claim_id\n        ,a.claim_id_b as claim_id\n        ,s.depth + 1 as depth\n    from {{ ref('claims_preprocessing__inst_merge_final')}} a\n    inner join stage s\n        on a.claim_id_a = s.claim_id\n  )\n\nselect * from stage\nwhere claim_id is not null", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_merge_crosswalk.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_merge_crosswalk.sql", "name": "claims_preprocessing__inst_merge_crosswalk", "alias": "inst_merge_crosswalk", "checksum": {"name": "sha256", "checksum": "589f33da818856e1098836211c7ca72dd53c26933147ee61af0d5d2da7023efd"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__inst_merge_final"], ["claims_preprocessing__inst_merge_final"]], "sources": [], "metrics": [], "description": "Crosswalk of claim ids to a master grouper (encounter id)", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_merge_crosswalk.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_merge_crosswalk", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1790936, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Use recursion to umbrella claim pairs under one id.\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\nwith recursive stage (patient_id, group_claim_id, claim_id, depth) as(\n    select\n        patient_id\n        ,claim_id_a as group_claim_id\n        , claim_id_a as claim_id\n        , 1 as depth\n    from tuva.core.inst_merge_final\n    where claim_id_b is null\n\nunion all\n  \n    select\n        a.patient_id\n        ,s.group_claim_id\n        ,a.claim_id_b as claim_id\n        ,s.depth + 1 as depth\n    from tuva.core.inst_merge_final a\n    inner join stage s\n        on a.claim_id_a = s.claim_id\n  )\n\nselect * from stage\nwhere claim_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_merge_crosswalk"}, "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"]}, "config": {"enabled": true, "alias": "encounter_inst_stage", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_inst_stage"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith encounter_combined as(\n  select \n    encounter_id\n    ,min(claim_start_date) as encounter_start_date\n    ,max(claim_end_date) as encounter_end_date\n    ,min(admission_date) as admission_date\n    ,max(discharge_date) as discharge_date\n    ,max(paid_date) as paid_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(allowed_amount) as allowed_amount\n    ,sum(charge_amount) as charge_amount\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}} mc\n  group by\n      encounter_id\n)\n, encounter_stage as(\n  select\n    mc.encounter_id\n    ,mc.patient_id\n    ,mc.encounter_type\n    ,mc.admit_source_code\n    ,mc.admit_source_description\n    ,mc.admit_type_code\n    ,mc.admit_type_description\n    ,mc.discharge_disposition_code\n    ,mc.discharge_disposition_description\n    ,mc.rendering_npi\n    ,mc.billing_npi\n    ,mc.facility_npi\n    ,mc.facility_name\n    ,mc.ms_drg_code\n    ,mc.ms_drg_description\n    ,data_source\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_start_date) as row_sequence_first\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_end_date) as row_sequence_last\n  from {{ ref('claims_preprocessing__encounter_claim_line_stage')}} mc\n  where claim_type in ('institutional')\n)\n\nselect distinct\n    cast(s.encounter_id as varchar) as encounter_id\n    ,cast(s.patient_id as varchar) as patient_id\n    ,cast(s.encounter_type as varchar) as encounter_type\n    ,cast(c.encounter_start_date as date) as encounter_start_date\n    ,cast(c.encounter_end_date as date) as encounter_end_date\n    ,cast(c.admission_date as date) as admission_date\n    ,cast(c.discharge_date as date) as discharge_date\n    ,cast(first_value(s.admit_source_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_code\n    ,cast(first_value(s.admit_source_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_description\n    ,cast(first_value(s.admit_type_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_code\n    ,cast(first_value(s.admit_type_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_description\n    ,cast(last_value(s.discharge_disposition_code) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_code\n    ,cast(last_value(s.discharge_disposition_description) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_description\n    ,cast(first_value(s.rendering_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as rendering_npi\n    ,cast(first_value(s.billing_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as billing_npi\n    ,cast(first_value(s.facility_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_npi\n    ,cast(first_value(s.facility_name) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_name\n    ,cast(first_value(s.ms_drg_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_code\n    ,cast(first_value(s.ms_drg_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_description\n    ,cast(c.paid_date as date) as paid_date\n    ,cast(c.paid_amount as numeric(38,2)) as paid_amount\n    ,cast(c.allowed_amount as numeric(38,2)) as allowed_amount\n    ,cast(c.charge_amount as numeric(38,2)) as charge_amount\n    ,cast(s.data_source as varchar) as data_source\nfrom encounter_stage s\ninner join encounter_combined c\n\ton s.encounter_id = c.encounter_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__encounter_inst_stage.sql", "original_file_path": "models/intermediate/claims_preprocessing__encounter_inst_stage.sql", "name": "claims_preprocessing__encounter_inst_stage", "alias": "encounter_inst_stage", "checksum": {"name": "sha256", "checksum": "bb45e26441e814e11ec4bd13e472f0f52f29b97255f86950c1bd2df4a7cf434d"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_claim_line_stage"], ["claims_preprocessing__encounter_claim_line_stage"]], "sources": [], "metrics": [], "description": "Encounter level data elements for institutional claims", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__encounter_inst_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter_inst_stage", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.1230907, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      Populate encounter level details.\n-------------------------------------------------------------------------------\n-- Modification History\n--\n-------------------------------------------------------------------------------\n\n\nwith encounter_combined as(\n  select \n    encounter_id\n    ,min(claim_start_date) as encounter_start_date\n    ,max(claim_end_date) as encounter_end_date\n    ,min(admission_date) as admission_date\n    ,max(discharge_date) as discharge_date\n    ,max(paid_date) as paid_date\n    ,sum(paid_amount) as paid_amount\n    ,sum(allowed_amount) as allowed_amount\n    ,sum(charge_amount) as charge_amount\n  from tuva.core.encounter_claim_line_stage mc\n  group by\n      encounter_id\n)\n, encounter_stage as(\n  select\n    mc.encounter_id\n    ,mc.patient_id\n    ,mc.encounter_type\n    ,mc.admit_source_code\n    ,mc.admit_source_description\n    ,mc.admit_type_code\n    ,mc.admit_type_description\n    ,mc.discharge_disposition_code\n    ,mc.discharge_disposition_description\n    ,mc.rendering_npi\n    ,mc.billing_npi\n    ,mc.facility_npi\n    ,mc.facility_name\n    ,mc.ms_drg_code\n    ,mc.ms_drg_description\n    ,data_source\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_start_date) as row_sequence_first\n    ,row_number() over (partition by mc.encounter_id order by mc.claim_line_number, mc.claim_end_date) as row_sequence_last\n  from tuva.core.encounter_claim_line_stage mc\n  where claim_type in ('institutional')\n)\n\nselect distinct\n    cast(s.encounter_id as varchar) as encounter_id\n    ,cast(s.patient_id as varchar) as patient_id\n    ,cast(s.encounter_type as varchar) as encounter_type\n    ,cast(c.encounter_start_date as date) as encounter_start_date\n    ,cast(c.encounter_end_date as date) as encounter_end_date\n    ,cast(c.admission_date as date) as admission_date\n    ,cast(c.discharge_date as date) as discharge_date\n    ,cast(first_value(s.admit_source_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_code\n    ,cast(first_value(s.admit_source_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_source_description\n    ,cast(first_value(s.admit_type_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_code\n    ,cast(first_value(s.admit_type_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as admit_type_description\n    ,cast(last_value(s.discharge_disposition_code) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_code\n    ,cast(last_value(s.discharge_disposition_description) over(partition by s.encounter_id order by s.row_sequence_last rows between unbounded preceding and unbounded following) as varchar) as discharge_disposition_description\n    ,cast(first_value(s.rendering_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as rendering_npi\n    ,cast(first_value(s.billing_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as billing_npi\n    ,cast(first_value(s.facility_npi) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_npi\n    ,cast(first_value(s.facility_name) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as facility_name\n    ,cast(first_value(s.ms_drg_code) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_code\n    ,cast(first_value(s.ms_drg_description) over(partition by s.encounter_id order by s.row_sequence_first rows between unbounded preceding and unbounded following) as varchar) as ms_drg_description\n    ,cast(c.paid_date as date) as paid_date\n    ,cast(c.paid_amount as numeric(38,2)) as paid_amount\n    ,cast(c.allowed_amount as numeric(38,2)) as allowed_amount\n    ,cast(c.charge_amount as numeric(38,2)) as charge_amount\n    ,cast(s.data_source as varchar) as data_source\nfrom encounter_stage s\ninner join encounter_combined c\n\ton s.encounter_id = c.encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter_inst_stage"}, "model.claims_preprocessing.claims_preprocessing__prof_merge_final": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": "prof_merge_final", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__prof_merge_final"], "unique_id": "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "raw_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      May 2022\n-- Purpose      Group office visit claims from the same day with the same provider.\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith same_day_same_provider as(\n  select\n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.billing_npi\n      ,map.claim_type\n      ,min(map.claim_id) as encounter_id\n  from {{ ref('claims_preprocessing__encounter_type_union')}} map\n  left join {{ ref('claims_preprocessing__prof_inst_encounter_crosswalk')}} xwalk\n    on map.claim_id = xwalk.claim_id\n  where xwalk.claim_id is null\n  and map.encounter_type not in ('inpatient psychiatric','inpatient rehabilitation','acute inpatient','skilled nursing facility','home health','hospice')\n  and map.claim_type = 'professional'\n  group by \n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.billing_npi\n      ,map.claim_type\n  having count(*) > 1\n)\n, same_day_only as(\n  select\n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.claim_type\n      ,min(map.claim_id) as encounter_id\n  from {{ ref('claims_preprocessing__encounter_type_union')}} map\n  left join {{ ref('claims_preprocessing__prof_inst_encounter_crosswalk')}} xwalk\n    on map.claim_id = xwalk.claim_id\n  where xwalk.claim_id is null\n  and map.encounter_type in ('inpatient psychiatric','inpatient rehabilitation','acute inpatient','skilled nursing facility','home health','hospice')\n  and map.claim_type = 'professional'\n  group by \n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.claim_type\n  having count(*) > 1\n)\n\n\nselect\n    map.patient_id\n    ,same.encounter_id\n    ,map.claim_id\n    ,map.encounter_type\n    ,map.claim_start_date\n    ,map.billing_npi\n    ,map.claim_type\nfrom same_day_same_provider same\ninner join {{ ref('claims_preprocessing__encounter_type_union')}} map\n    on same.patient_id = map.patient_id\n    and same.encounter_type = map.encounter_type\n    and same.claim_start_date = map.claim_start_date\n    and same.billing_npi = map.billing_npi\n    and same.claim_type = map.claim_type\n\nunion all\n\nselect\n    map.patient_id\n    ,day.encounter_id\n    ,map.claim_id\n    ,map.encounter_type\n    ,map.claim_start_date\n    ,map.billing_npi\n    ,map.claim_type\nfrom same_day_only day\ninner join {{ ref('claims_preprocessing__encounter_type_union')}} map\n    on day.patient_id = map.patient_id\n    and day.encounter_type = map.encounter_type\n    and day.claim_start_date = map.claim_start_date\n    and day.claim_type = map.claim_type", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__prof_merge_final.sql", "original_file_path": "models/intermediate/claims_preprocessing__prof_merge_final.sql", "name": "claims_preprocessing__prof_merge_final", "alias": "prof_merge_final", "checksum": {"name": "sha256", "checksum": "f08dc34f3dae510a51148d732eb09f75b4c839ad7ec9222dca4471b8ce80b5f9"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__prof_inst_encounter_crosswalk"], ["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__prof_inst_encounter_crosswalk"], ["claims_preprocessing__encounter_type_union"], ["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "List of institutional claims pairs that are eligable for merging.", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__prof_merge_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "prof_merge_final", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.2072165, "compiled_code": "---------------------------------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      May 2022\n-- Purpose      Group office visit claims from the same day with the same provider.\n-- Notes\n---------------------------------------------------------------------------------------------------------\n-- Modification History\n---------------------------------------------------------------------------------------------------------\n\n\nwith same_day_same_provider as(\n  select\n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.billing_npi\n      ,map.claim_type\n      ,min(map.claim_id) as encounter_id\n  from tuva.core.encounter_type_union map\n  left join tuva.core.prof_inst_encounter_crosswalk xwalk\n    on map.claim_id = xwalk.claim_id\n  where xwalk.claim_id is null\n  and map.encounter_type not in ('inpatient psychiatric','inpatient rehabilitation','acute inpatient','skilled nursing facility','home health','hospice')\n  and map.claim_type = 'professional'\n  group by \n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.billing_npi\n      ,map.claim_type\n  having count(*) > 1\n)\n, same_day_only as(\n  select\n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.claim_type\n      ,min(map.claim_id) as encounter_id\n  from tuva.core.encounter_type_union map\n  left join tuva.core.prof_inst_encounter_crosswalk xwalk\n    on map.claim_id = xwalk.claim_id\n  where xwalk.claim_id is null\n  and map.encounter_type in ('inpatient psychiatric','inpatient rehabilitation','acute inpatient','skilled nursing facility','home health','hospice')\n  and map.claim_type = 'professional'\n  group by \n      map.patient_id\n      ,map.encounter_type\n      ,map.claim_start_date\n      ,map.claim_type\n  having count(*) > 1\n)\n\n\nselect\n    map.patient_id\n    ,same.encounter_id\n    ,map.claim_id\n    ,map.encounter_type\n    ,map.claim_start_date\n    ,map.billing_npi\n    ,map.claim_type\nfrom same_day_same_provider same\ninner join tuva.core.encounter_type_union map\n    on same.patient_id = map.patient_id\n    and same.encounter_type = map.encounter_type\n    and same.claim_start_date = map.claim_start_date\n    and same.billing_npi = map.billing_npi\n    and same.claim_type = map.claim_type\n\nunion all\n\nselect\n    map.patient_id\n    ,day.encounter_id\n    ,map.claim_id\n    ,map.encounter_type\n    ,map.claim_start_date\n    ,map.billing_npi\n    ,map.claim_type\nfrom same_day_only day\ninner join tuva.core.encounter_type_union map\n    on day.patient_id = map.patient_id\n    and day.encounter_type = map.encounter_type\n    and day.claim_start_date = map.claim_start_date\n    and day.claim_type = map.claim_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.prof_merge_final"}, "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": "inst_encounter_merge", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing", "medical_claim"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__inst_encounter_merge"], "unique_id": "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge", "raw_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      For merged claims only, determine encounter level data elements.\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-------------------------------------------------------------------------------\n{{ config(\n    tags=[\"medical_claim\"]\n    ,enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n) }}\n\nselect \n  mc.group_claim_id as encounter_id\n  ,d.patient_id as patient_id\n  ,d.encounter_type as encounter_type\n  ,min(d.claim_start_date) as encounter_start_date\n  ,max(d.claim_end_date) as encounter_end_date\n  ,sum(paid_amount) as paid_amount\n  ,sum(charge_amount) as charge_amount\nfrom {{ ref('claims_preprocessing__inst_merge_crosswalk')}} mc\ninner join {{ ref('claims_preprocessing__encounter_type_union')}} d\n  on mc.claim_id = d.claim_id\ngroup by \n  mc.group_claim_id\n  ,d.patient_id\n  ,d.encounter_type", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "intermediate/claims_preprocessing__inst_encounter_merge.sql", "original_file_path": "models/intermediate/claims_preprocessing__inst_encounter_merge.sql", "name": "claims_preprocessing__inst_encounter_merge", "alias": "inst_encounter_merge", "checksum": {"name": "sha256", "checksum": "e60c14d37c213c8b100a564bccff5a79e1a6ba20717305a804de218ea141bd43"}, "tags": ["medical_claim", "claims_preprocessing"], "refs": [["claims_preprocessing__inst_merge_crosswalk"], ["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "Creation of encounter for merged institutional claims", "columns": {"encounter_id": {"name": "encounter_id", "description": "Unique identifer and primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "claims_preprocessing://models/_models.yml", "compiled_path": "target/compiled/claims_preprocessing/models/intermediate/claims_preprocessing__inst_encounter_merge.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "inst_encounter_merge", "tags": ["medical_claim"], "enabled": true}, "created_at": 1668635368.165813, "compiled_code": "-------------------------------------------------------------------------------\n-- Author       Thu Xuan Vu\n-- Created      June 2022\n-- Purpose      For merged claims only, determine encounter level data elements.\n-- Notes        \n-------------------------------------------------------------------------------\n-- Modification History\n-- 09/28/2022 Thu Xuan Vu\n--      Changed references of merge_claim_id to claim_id\n-------------------------------------------------------------------------------\n\n\nselect \n  mc.group_claim_id as encounter_id\n  ,d.patient_id as patient_id\n  ,d.encounter_type as encounter_type\n  ,min(d.claim_start_date) as encounter_start_date\n  ,max(d.claim_end_date) as encounter_end_date\n  ,sum(paid_amount) as paid_amount\n  ,sum(charge_amount) as charge_amount\nfrom tuva.core.inst_merge_crosswalk mc\ninner join tuva.core.encounter_type_union d\n  on mc.claim_id = d.claim_id\ngroup by \n  mc.group_claim_id\n  ,d.patient_id\n  ,d.encounter_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.inst_encounter_merge"}, "seed.terminology.terminology__icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_cm"], "unique_id": "seed.terminology.terminology__icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__icd_10_cm.csv", "original_file_path": "terminology/terminology__icd_10_cm.csv", "name": "terminology__icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "terminology/terminology__icd_10_cm.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}}, "created_at": 1668635368.5833344, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm"}, "seed.terminology.terminology__admit_source": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_source", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_source"], "unique_id": "seed.terminology.terminology__admit_source", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__admit_source.csv", "original_file_path": "terminology/terminology__admit_source.csv", "name": "terminology__admit_source", "alias": "admit_source", "checksum": {"name": "sha256", "checksum": "392e0c1935973dbea2e96030db856a8ccfa660cbd51f45c92d51d121aa432a8b"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_source", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}}, "created_at": 1668635368.4234736, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_source"}, "seed.terminology.terminology__chronic_conditions": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "chronic_conditions", "schema": "terminology", "database": "tuva", "tags": ["terminology", "chronic_conditions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__chronic_conditions"], "unique_id": "seed.terminology.terminology__chronic_conditions", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__chronic_conditions.csv", "original_file_path": "terminology/terminology__chronic_conditions.csv", "name": "terminology__chronic_conditions", "alias": "chronic_conditions", "checksum": {"name": "path", "checksum": "terminology/terminology__chronic_conditions.csv"}, "tags": ["terminology", "chronic_conditions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "chronic_conditions", "enabled": true, "tags": ["terminology", "chronic_conditions"], "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}}, "created_at": 1668635368.4774039, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.chronic_conditions"}, "seed.terminology.terminology__claim_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "claim_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__claim_type"], "unique_id": "seed.terminology.terminology__claim_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__claim_type.csv", "original_file_path": "terminology/terminology__claim_type.csv", "name": "terminology__claim_type", "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "da35be4c432144ba8003d5ef8f2d815d8afce6ed215d6aa065e305ad11f7552c"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "claim_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}}, "created_at": 1668635368.4862695, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.claim_type"}, "seed.terminology.terminology__fips_county": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_county", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_county"], "unique_id": "seed.terminology.terminology__fips_county", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__fips_county.csv", "original_file_path": "terminology/terminology__fips_county.csv", "name": "terminology__fips_county", "alias": "fips_county", "checksum": {"name": "sha256", "checksum": "51c80da82ec1f20665fbd65379796c53f724781fa3833396cba093c89004bfb5"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_county", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}}, "created_at": 1668635368.541548, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_county"}, "seed.terminology.terminology__present_on_admission": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "present_on_admission", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__present_on_admission"], "unique_id": "seed.terminology.terminology__present_on_admission", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__present_on_admission.csv", "original_file_path": "terminology/terminology__present_on_admission.csv", "name": "terminology__present_on_admission", "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "4a0669b7aed638378b8cde6a1e4d0202071923c695ecba93cf266d7c1b206d8e"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "present_on_admission", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}}, "created_at": 1668635368.7095501, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.present_on_admission"}, "seed.terminology.terminology__race": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "race", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"race_code": "varchar", "race_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__race"], "unique_id": "seed.terminology.terminology__race", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__race.csv", "original_file_path": "terminology/terminology__race.csv", "name": "terminology__race", "alias": "race", "checksum": {"name": "sha256", "checksum": "267e1246e929209855c8128566cb1eadc21f878998bf5ee3fd36b50a76e2da2c"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "race", "enabled": true, "tags": "terminology", "column_types": {"race_code": "varchar", "race_description": "varchar"}}, "created_at": 1668635368.7180514, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.race"}, "seed.terminology.terminology__medicare_state_fips": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_state_fips", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_state_fips"], "unique_id": "seed.terminology.terminology__medicare_state_fips", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__medicare_state_fips.csv", "original_file_path": "terminology/terminology__medicare_state_fips.csv", "name": "terminology__medicare_state_fips", "alias": "medicare_state_fips", "checksum": {"name": "sha256", "checksum": "66012b041d1956dca6bf24bc25e691d419e458b1e6b54bb13d8bf5ff802ba2d9"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_state_fips", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "state": "varchar"}}, "created_at": 1668635368.6432705, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_state_fips"}, "seed.terminology.terminology__ethnicity": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ethnicity", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ethnicity"], "unique_id": "seed.terminology.terminology__ethnicity", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__ethnicity.csv", "original_file_path": "terminology/terminology__ethnicity.csv", "name": "terminology__ethnicity", "alias": "ethnicity", "checksum": {"name": "sha256", "checksum": "d23c1e3d7417d569bbb1e11cd0a493cfd60f60e231756adb2f7b6160ca2f93e6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ethnicity", "enabled": true, "tags": "terminology", "column_types": {"code": "varchar", "description": "varchar"}}, "created_at": 1668635368.5212812, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ethnicity"}, "seed.terminology.terminology__hcpcs_level_2": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "hcpcs_level_2", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__hcpcs_level_2"], "unique_id": "seed.terminology.terminology__hcpcs_level_2", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__hcpcs_level_2.csv", "original_file_path": "terminology/terminology__hcpcs_level_2.csv", "name": "terminology__hcpcs_level_2", "alias": "hcpcs_level_2", "checksum": {"name": "path", "checksum": "terminology/terminology__hcpcs_level_2.csv"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "hcpcs_level_2", "enabled": true, "tags": "terminology", "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}}, "created_at": 1668635368.5710273, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.hcpcs_level_2"}, "seed.terminology.terminology__place_of_service": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "place_of_service", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__place_of_service"], "unique_id": "seed.terminology.terminology__place_of_service", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__place_of_service.csv", "original_file_path": "terminology/terminology__place_of_service.csv", "name": "terminology__place_of_service", "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "760955a3ad21bd2c8f4257881e8f713276eda10623bb05f373634ff186ea8592"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "place_of_service", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}}, "created_at": 1668635368.6825714, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.place_of_service"}, "seed.terminology.terminology__gender": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "gender", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__gender"], "unique_id": "seed.terminology.terminology__gender", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__gender.csv", "original_file_path": "terminology/terminology__gender.csv", "name": "terminology__gender", "alias": "gender", "checksum": {"name": "sha256", "checksum": "49caad564a6d46cabcbbaa25857984aa1f7d4426ed5927989cdeddc1539d6fb6"}, "tags": ["terminology", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "gender", "enabled": true, "tags": ["terminology", "readmissions", "data_profiling"], "column_types": {"description": "varchar"}}, "created_at": 1668635368.5596168, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.gender"}, "seed.terminology.terminology__icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_pcs"], "unique_id": "seed.terminology.terminology__icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__icd_10_pcs.csv", "original_file_path": "terminology/terminology__icd_10_pcs.csv", "name": "terminology__icd_10_pcs", "alias": "icd_10_pcs", "checksum": {"name": "path", "checksum": "terminology/terminology__icd_10_pcs.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}}, "created_at": 1668635368.6056268, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs"}, "seed.terminology.terminology__medicare_dual_eligibility": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_dual_eligibility", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_dual_eligibility"], "unique_id": "seed.terminology.terminology__medicare_dual_eligibility", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__medicare_dual_eligibility.csv", "original_file_path": "terminology/terminology__medicare_dual_eligibility.csv", "name": "terminology__medicare_dual_eligibility", "alias": "medicare_dual_eligibility", "checksum": {"name": "sha256", "checksum": "db7415a91cd31bbf2318963aa717b319319516bdc8426e2ebb2e78db002cb58d"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_dual_eligibility", "enabled": true, "tags": "terminology", "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}}, "created_at": 1668635368.6345167, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_dual_eligibility"}, "seed.terminology.terminology__medicare_status": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_status", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_status"], "unique_id": "seed.terminology.terminology__medicare_status", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__medicare_status.csv", "original_file_path": "terminology/terminology__medicare_status.csv", "name": "terminology__medicare_status", "alias": "medicare_status", "checksum": {"name": "sha256", "checksum": "2bd1a8a081fceb69bf91287c8a56c370ea1544a1fbbe12829566955012c04c97"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_status", "enabled": true, "tags": "terminology", "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}}, "created_at": 1668635368.6517715, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_status"}, "seed.terminology.terminology__admit_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_type"], "unique_id": "seed.terminology.terminology__admit_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__admit_type.csv", "original_file_path": "terminology/terminology__admit_type.csv", "name": "terminology__admit_type", "alias": "admit_type", "checksum": {"name": "sha256", "checksum": "0fba96cde9676541c9205364a2e2285efa0e9500507a4bcc7b790a982c9482ac"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}}, "created_at": 1668635368.4327128, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_type"}, "seed.terminology.terminology__bill_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "bill_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "int", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__bill_type"], "unique_id": "seed.terminology.terminology__bill_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__bill_type.csv", "original_file_path": "terminology/terminology__bill_type.csv", "name": "terminology__bill_type", "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "8b363106ed8e54488d71b8f4ccfca6e371692e836ef77b335621df6bf63b9a8a"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "bill_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "int", "deprecated_date": "date"}}, "created_at": 1668635368.461023, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.bill_type"}, "seed.terminology.terminology__encounter_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "encounter_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__encounter_type"], "unique_id": "seed.terminology.terminology__encounter_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__encounter_type.csv", "original_file_path": "terminology/terminology__encounter_type.csv", "name": "terminology__encounter_type", "alias": "encounter_type", "checksum": {"name": "sha256", "checksum": "d75ee477d89a9d8d679a9fcc64ce29975b9fe6eea1ad094d2e60d62e5b011c3c"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "encounter_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"description": "varchar"}}, "created_at": 1668635368.5123298, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.encounter_type"}, "seed.terminology.terminology__mdc": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "mdc", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__mdc"], "unique_id": "seed.terminology.terminology__mdc", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__mdc.csv", "original_file_path": "terminology/terminology__mdc.csv", "name": "terminology__mdc", "alias": "mdc", "checksum": {"name": "sha256", "checksum": "c941d78a6e4de2c32b546a46f0b0c429bb209a9e1a7049a803cf8c447c73d0d6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "mdc", "enabled": true, "tags": "terminology", "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}}, "created_at": 1668635368.6257427, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.mdc"}, "seed.terminology.terminology__code_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "code_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__code_type"], "unique_id": "seed.terminology.terminology__code_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__code_type.csv", "original_file_path": "terminology/terminology__code_type.csv", "name": "terminology__code_type", "alias": "code_type", "checksum": {"name": "sha256", "checksum": "5fe9aa562e036ca6f98866fe29d85c1f2351f53d00fdde631ad8dce183ce5788"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "code_type", "enabled": true, "tags": "terminology", "column_types": {"description": "varchar"}}, "created_at": 1668635368.4939454, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.code_type"}, "seed.terminology.terminology__ms_drg": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ms_drg", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ms_drg"], "unique_id": "seed.terminology.terminology__ms_drg", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__ms_drg.csv", "original_file_path": "terminology/terminology__ms_drg.csv", "name": "terminology__ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "63740ef5cb6d40d8b4f261a59de820df7f8d80ca96989194348b1874f65861d6"}, "tags": ["terminology", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ms_drg", "enabled": true, "tags": ["terminology", "readmissions", "data_profiling"], "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}}, "created_at": 1668635368.6645734, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ms_drg"}, "seed.terminology.terminology__fips_state": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_state", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_state"], "unique_id": "seed.terminology.terminology__fips_state", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__fips_state.csv", "original_file_path": "terminology/terminology__fips_state.csv", "name": "terminology__fips_state", "alias": "fips_state", "checksum": {"name": "sha256", "checksum": "2208d05e654084a3cff054be9aa2b340fe76e8fee9af380406ce0fa3fe592a89"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_state", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}}, "created_at": 1668635368.5510452, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_state"}, "seed.terminology.terminology__payer_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "payer_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"payer_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__payer_type"], "unique_id": "seed.terminology.terminology__payer_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__payer_type.csv", "original_file_path": "terminology/terminology__payer_type.csv", "name": "terminology__payer_type", "alias": "payer_type", "checksum": {"name": "sha256", "checksum": "b79b79e782eb2d68211a9f375c0c1aebc9828449c51f77297e8e70c51a6827e0"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "payer_type", "enabled": true, "tags": "terminology", "column_types": {"payer_type": "varchar"}}, "created_at": 1668635368.6725476, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.payer_type"}, "seed.terminology.terminology__revenue_center": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "revenue_center", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"revenue_center_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__revenue_center"], "unique_id": "seed.terminology.terminology__revenue_center", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__revenue_center.csv", "original_file_path": "terminology/terminology__revenue_center.csv", "name": "terminology__revenue_center", "alias": "revenue_center", "checksum": {"name": "sha256", "checksum": "6d630994900478a2efc0f63fa4045b387bd020cb519fac04ba16b32fb11a1647"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "revenue_center", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"revenue_center_code": "varchar", "description": "varchar"}}, "created_at": 1668635368.7275245, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.revenue_center"}, "seed.terminology.terminology__discharge_disposition": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "discharge_disposition", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__discharge_disposition"], "unique_id": "seed.terminology.terminology__discharge_disposition", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "terminology__discharge_disposition.csv", "original_file_path": "terminology/terminology__discharge_disposition.csv", "name": "terminology__discharge_disposition", "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "992cf51c8d6a2dfe3d3f54e65bf618e68599ed2f48bcf75d59ee8bdd48d1aa0e"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "discharge_disposition", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}}, "created_at": 1668635368.5041108, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.discharge_disposition"}, "seed.terminology.terminology__exclusion_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "exclusion_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__exclusion_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__exclusion_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__exclusion_ccs_diagnosis_category.csv", "original_file_path": "terminology/readmissions/terminology__exclusion_ccs_diagnosis_category.csv", "name": "terminology__exclusion_ccs_diagnosis_category", "alias": "exclusion_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "4bacd904ef0767100c7371e367970c9b25139aae994d3b020ceee61a7aa1e0a7"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "exclusion_ccs_diagnosis_category", "enabled": true, "tags": "terminology", "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}}, "created_at": 1668635368.5320358, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.exclusion_ccs_diagnosis_category"}, "seed.terminology.terminology__icd_10_pcs_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_pcs_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_pcs_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__icd_10_pcs_to_ccs.csv", "original_file_path": "terminology/readmissions/terminology__icd_10_pcs_to_ccs.csv", "name": "terminology__icd_10_pcs_to_ccs", "alias": "icd_10_pcs_to_ccs", "checksum": {"name": "path", "checksum": "terminology/readmissions/terminology__icd_10_pcs_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}}, "created_at": 1668635368.6168373, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs_to_ccs"}, "seed.terminology.terminology__always_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__always_planned_ccs_procedure_category.csv", "original_file_path": "terminology/readmissions/terminology__always_planned_ccs_procedure_category.csv", "name": "terminology__always_planned_ccs_procedure_category", "alias": "always_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "af9918830532c9dd37924853c29502d8c9f14bbb1a380de74cfcc740b0ba48b7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}}, "created_at": 1668635368.450894, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_procedure_category"}, "seed.terminology.terminology__always_planned_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__always_planned_ccs_diagnosis_category.csv", "original_file_path": "terminology/readmissions/terminology__always_planned_ccs_diagnosis_category.csv", "name": "terminology__always_planned_ccs_diagnosis_category", "alias": "always_planned_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "3ec5bc59c274f64708e2b16e9eff3db72230522289dd3f21567956d2070b3be2"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_diagnosis_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}}, "created_at": 1668635368.4416509, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_diagnosis_category"}, "seed.terminology.terminology__potentially_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__potentially_planned_ccs_procedure_category.csv", "original_file_path": "terminology/readmissions/terminology__potentially_planned_ccs_procedure_category.csv", "name": "terminology__potentially_planned_ccs_procedure_category", "alias": "potentially_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "7b9db975327ccef9eb004256f6dac2d16248422f0c189d1c79b19826f793afd5"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}}, "created_at": 1668635368.691557, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_ccs_procedure_category"}, "seed.terminology.terminology__icd_10_cm_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_cm_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_cm_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__icd_10_cm_to_ccs.csv", "original_file_path": "terminology/readmissions/terminology__icd_10_cm_to_ccs.csv", "name": "terminology__icd_10_cm_to_ccs", "alias": "icd_10_cm_to_ccs", "checksum": {"name": "path", "checksum": "terminology/readmissions/terminology__icd_10_cm_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}}, "created_at": 1668635368.5943358, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm_to_ccs"}, "seed.terminology.terminology__acute_diagnosis_icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_icd_10_cm"], "unique_id": "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__acute_diagnosis_icd_10_cm.csv", "original_file_path": "terminology/readmissions/terminology__acute_diagnosis_icd_10_cm.csv", "name": "terminology__acute_diagnosis_icd_10_cm", "alias": "acute_diagnosis_icd_10_cm", "checksum": {"name": "path", "checksum": "terminology/readmissions/terminology__acute_diagnosis_icd_10_cm.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_icd_10_cm", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar"}}, "created_at": 1668635368.4134474, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_icd_10_cm"}, "seed.terminology.terminology__specialty_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "specialty_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__specialty_cohort"], "unique_id": "seed.terminology.terminology__specialty_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__specialty_cohort.csv", "original_file_path": "terminology/readmissions/terminology__specialty_cohort.csv", "name": "terminology__specialty_cohort", "alias": "specialty_cohort", "checksum": {"name": "sha256", "checksum": "f4c090fe63477ea354c6a36dd54816fe76cdead723bbb39aeeba640a319c6d8d"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "specialty_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}}, "created_at": 1668635368.7388685, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.specialty_cohort"}, "seed.terminology.terminology__acute_diagnosis_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_ccs"], "unique_id": "seed.terminology.terminology__acute_diagnosis_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__acute_diagnosis_ccs.csv", "original_file_path": "terminology/readmissions/terminology__acute_diagnosis_ccs.csv", "name": "terminology__acute_diagnosis_ccs", "alias": "acute_diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "654779d4a8e08465f9037d8e544b7a4c96053a6daefaa6d7fe56496b31ef25e4"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}}, "created_at": 1668635368.4045866, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_ccs"}, "seed.terminology.terminology__potentially_planned_icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_icd_10_pcs"], "unique_id": "seed.terminology.terminology__potentially_planned_icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__potentially_planned_icd_10_pcs.csv", "original_file_path": "terminology/readmissions/terminology__potentially_planned_icd_10_pcs.csv", "name": "terminology__potentially_planned_icd_10_pcs", "alias": "potentially_planned_icd_10_pcs", "checksum": {"name": "sha256", "checksum": "d3b577c57486f9fa6d12cd8b7da4c54d8f2f6996d19d35ca169e5861f12c031f"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_icd_10_pcs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}}, "created_at": 1668635368.7007785, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_icd_10_pcs"}, "seed.terminology.terminology__surgery_gynecology_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "surgery_gynecology_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__surgery_gynecology_cohort"], "unique_id": "seed.terminology.terminology__surgery_gynecology_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "readmissions/terminology__surgery_gynecology_cohort.csv", "original_file_path": "terminology/readmissions/terminology__surgery_gynecology_cohort.csv", "name": "terminology__surgery_gynecology_cohort", "alias": "surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "aebcfa4c5a82d3af091d8d223b26ca9349da581228f32f0d59a7754343199a58"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terminology://terminology/_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "surgery_gynecology_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}}, "created_at": 1668635368.7524657, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.surgery_gynecology_cohort"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.da3d8a2326": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_claim_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_claim_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.da3d8a2326", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_claim_crosswalk_claim_id", "alias": "unique_claims_preprocessing__encounter_claim_crosswalk_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_claim_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.2659943, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_claim_crosswalk\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__encounter_claim_crosswalk"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id.bf4520c954": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_claim_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id.bf4520c954", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id", "alias": "not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_claim_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__ede6f8ae5e6dce38db5b0c146d7d8902"}, "created_at": 1668635368.2680328, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.encounter_claim_crosswalk\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__encounter_claim_crosswalk"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_.b81efd67bb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id || '_' || claim_line_number)", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_claim_line_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_.b81efd67bb", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_", "alias": "unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_claim_line_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__e_577155891c5cef494cc83df61a8d5de5"}, "created_at": 1668635368.2701447, "compiled_code": "\n    \n    \n\nselect\n    (claim_id || '_' || claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_claim_line_stage\nwhere (claim_id || '_' || claim_line_number) is not null\ngroup by (claim_id || '_' || claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__encounter_claim_line_stage"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_inst_stage_encounter_id.759ef63e91": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_inst_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_inst_stage_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_inst_stage_encounter_id.759ef63e91", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__encounter_inst_stage_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_inst_stage_encounter_id", "alias": "unique_claims_preprocessing__encounter_inst_stage_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_inst_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__encounter_inst_stage_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.2719655, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_inst_stage\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter_inst_stage"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_inst_stage_encounter_id.707de22a1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_inst_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_inst_stage_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_inst_stage_encounter_id.707de22a1a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_inst_stage_encounter_id", "alias": "not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_inst_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__3bf89711edeccc8a28bf3c90ccb89dbc"}, "created_at": 1668635368.2737522, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.encounter_inst_stage\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter_inst_stage"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_prof_stage_encounter_id.e2960bbf6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_prof_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_prof_stage_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_prof_stage_encounter_id.e2960bbf6e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__encounter_prof_stage_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_prof_stage_encounter_id", "alias": "unique_claims_preprocessing__encounter_prof_stage_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_prof_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__encounter_prof_stage_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.275534, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_prof_stage\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter_prof_stage"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_prof_stage_encounter_id.108aa7014a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_prof_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_prof_stage_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_prof_stage_encounter_id.108aa7014a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_prof_stage_encounter_id", "alias": "not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_prof_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__3b709649568198d2b41335f0301a34ba"}, "created_at": 1668635368.2774065, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.encounter_prof_stage\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter_prof_stage"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_line_number.a8061ea4ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_line_number", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_claim_line_number"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_line_number.a8061ea4ec", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_claim_line_number", "alias": "not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__88eb8a14678e85374494758f3efc5e53"}, "created_at": 1668635368.279202, "compiled_code": "\n    \n    \n\n\n\nselect claim_line_number\nfrom tuva.core.encounter_type_mapping\nwhere claim_line_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_line_number", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_type.a3148fba07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_type", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_claim_type"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_type.a3148fba07", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_claim_type", "alias": "not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__bd4e723b900df0cf4055dc65846e0b2a"}, "created_at": 1668635368.2812693, "compiled_code": "\n    \n    \n\n\n\nselect claim_type\nfrom tuva.core.encounter_type_mapping\nwhere claim_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_type", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision.ec2f91a13e": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["dental", "institutional", "professional", "vision"], "column_name": "claim_type", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision"], "unique_id": "test.claims_preprocessing.accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision.ec2f91a13e", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8.sql", "original_file_path": "models/_models.yml", "name": "accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision", "alias": "accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "accepted_values_claims_preproc_053e5ee9da20c8cee83ca975252c7ed8"}, "created_at": 1668635368.2830386, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        claim_type as value_field,\n        count(*) as n_records\n\n    from tuva.core.encounter_type_mapping\n    group by claim_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'dental','institutional','professional','vision'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_type", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_id.121e549d58": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_id.121e549d58", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__encounter_type_mapping_claim_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_claim_id", "alias": "not_null_claims_preprocessing__encounter_type_mapping_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__encounter_type_mapping_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.2988741, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.encounter_type_mapping\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_patient_id.9d4c2941f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_patient_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_patient_id.9d4c2941f0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_patient_id", "alias": "not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__397c30c18ff580e7d66e0dae88672896"}, "created_at": 1668635368.300649, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.core.encounter_type_mapping\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d": {"test_metadata": {"name": "encounter_type_mapping", "kwargs": {"column_name": "encounter_type", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.claims_preprocessing.test_encounter_type_mapping", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "seed.terminology.terminology__encounter_type"]}, "config": {"enabled": true, "alias": "encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type"], "unique_id": "test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d", "raw_code": "{{ test_encounter_type_mapping(**_dbt_generic_test_kwargs) }}{{ config(alias=\"encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c.sql", "original_file_path": "models/_models.yml", "name": "encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type", "alias": "encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"], ["terminology__encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "enabled": true, "alias": "encounter_type_mapping_claims__20916f6a862c3092c00bd971c24de22c"}, "created_at": 1668635368.3023932, "compiled_code": "\n\n/** Returns rows if encounter type mapping does not exist in seed file\n    Used custom test to account for unmapped rows.  Do not want to add them to the seed and test passes if they exist.   **/\n\nselect m.encounter_type\nfrom tuva.core.encounter_type_mapping m\nleft join tuva.terminology.encounter_type e\n    on e.encounter_type = m.encounter_type\nwhere m.encounter_type <> 'unmapped'\nand e.encounter_type is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_type", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_start_date.72c1c09589": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_start_date", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_claim_start_date"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_start_date.72c1c09589", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_claim_start_date", "alias": "not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__fed7b856e619ae39ac5b204c71100114"}, "created_at": 1668635368.3092217, "compiled_code": "\n    \n    \n\n\n\nselect claim_start_date\nfrom tuva.core.encounter_type_mapping\nwhere claim_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_start_date", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_end_date.01f42c5f2c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_end_date", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_mapping_claim_end_date"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_end_date.01f42c5f2c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_mapping_claim_end_date", "alias": "not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__b24aa44047bb9fb145b9774af8f00945"}, "created_at": 1668635368.3111093, "compiled_code": "\n    \n    \n\n\n\nselect claim_end_date\nfrom tuva.core.encounter_type_mapping\nwhere claim_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_end_date", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi.ee282d4083": {"test_metadata": {"name": "inst_bill_type_code", "kwargs": {"column_name": "facility_npi", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.claims_preprocessing.test_inst_bill_type_code", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi"], "unique_id": "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi.ee282d4083", "raw_code": "{{ test_inst_bill_type_code(**_dbt_generic_test_kwargs) }}{{ config(alias=\"inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa.sql", "original_file_path": "models/_models.yml", "name": "inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi", "alias": "inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "enabled": true, "alias": "inst_bill_type_code_claims_pre_f36b78676bcdddb217d068052281befa"}, "created_at": 1668635368.3137662, "compiled_code": "\n\n/**  Returns rows if institutional claims have a null bill type code  **/\n\nselect facility_npi\nfrom tuva.core.encounter_type_mapping\nwhere claim_type = 'institutional'\nand nullif(bill_type_code,'') is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "facility_npi", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code.77c1f1ad54": {"test_metadata": {"name": "inst_bill_type_code", "kwargs": {"column_name": "bill_type_code", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.claims_preprocessing.test_inst_bill_type_code", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code"], "unique_id": "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code.77c1f1ad54", "raw_code": "{{ test_inst_bill_type_code(**_dbt_generic_test_kwargs) }}{{ config(alias=\"inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7.sql", "original_file_path": "models/_models.yml", "name": "inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code", "alias": "inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "enabled": true, "alias": "inst_bill_type_code_claims_pre_04edacf8193a6d370bb94f9ebb9221e7"}, "created_at": 1668635368.3206825, "compiled_code": "\n\n/**  Returns rows if institutional claims have a null bill type code  **/\n\nselect bill_type_code\nfrom tuva.core.encounter_type_mapping\nwhere claim_type = 'institutional'\nand nullif(bill_type_code,'') is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_type_code", "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_.3363ce66ca": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id || '-' || claim_line_number)", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_mapping')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_.3363ce66ca", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_", "alias": "unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_mapping"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "alias": "unique_claims_preprocessing__e_f93e5b80b8b044c3b3748e399b2d6c8e"}, "created_at": 1668635368.3260212, "compiled_code": "\n    \n    \n\nselect\n    (claim_id || '-' || claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_type_mapping\nwhere (claim_id || '-' || claim_line_number) is not null\ngroup by (claim_id || '-' || claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__encounter_type_mapping"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_union_claim_id.89a48a5bfe": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_union')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_type_union_claim_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_union_claim_id.89a48a5bfe", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__encounter_type_union_claim_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_type_union_claim_id", "alias": "unique_claims_preprocessing__encounter_type_union_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__encounter_type_union_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.327824, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_type_union\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__encounter_type_union"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_union_claim_id.8991791277": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_type_union')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_type_union_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_union_claim_id.8991791277", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__encounter_type_union_claim_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_type_union_claim_id", "alias": "not_null_claims_preprocessing__encounter_type_union_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_type_union"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__encounter_type_union_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.329921, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.encounter_type_union\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__encounter_type_union"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_final_encounter_id.f019334260": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_final')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_encounter_final_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_final_encounter_id.f019334260", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__inst_encounter_final_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_encounter_final_encounter_id", "alias": "unique_claims_preprocessing__inst_encounter_final_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_final"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__inst_encounter_final_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3317995, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_encounter_final\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_final"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_final_encounter_id.f81a2fda92": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_final')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_encounter_final_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_final_encounter_id.f81a2fda92", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_encounter_final_encounter_id", "alias": "not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_final"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__deffb9f32d58ec05fede326f9d95ebe6"}, "created_at": 1668635368.3335557, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.inst_encounter_final\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_final"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_merge_encounter_id.2d88d56000": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_merge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_encounter_merge_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_merge_encounter_id.2d88d56000", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__inst_encounter_merge_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_encounter_merge_encounter_id", "alias": "unique_claims_preprocessing__inst_encounter_merge_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_merge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__inst_encounter_merge_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3373935, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_encounter_merge\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_merge"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_merge_encounter_id.60619a7da4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_merge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_encounter_merge_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_merge_encounter_id.60619a7da4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_encounter_merge_encounter_id", "alias": "not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_merge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__16e1cbd21ca95aa44e50e70c2f5d1c9e"}, "created_at": 1668635368.339149, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.inst_encounter_merge\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_merge"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id.bec8fd90a3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_nonmerge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id.bec8fd90a3", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id", "alias": "unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_nonmerge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__i_6e0802953283db074b872c0d4011a175"}, "created_at": 1668635368.3409574, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_encounter_nonmerge\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_nonmerge"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id.1ed89c17bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_encounter_nonmerge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id.1ed89c17bb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id", "alias": "not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_encounter_nonmerge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__5e91c047ce4917c2c054ea8dba9c6f41"}, "created_at": 1668635368.3427577, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.inst_encounter_nonmerge\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__inst_encounter_nonmerge"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_crosswalk_claim_id.c2ac7f0d8f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_merge_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_crosswalk_claim_id.c2ac7f0d8f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__inst_merge_crosswalk_claim_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_merge_crosswalk_claim_id", "alias": "unique_claims_preprocessing__inst_merge_crosswalk_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__inst_merge_crosswalk_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3445246, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_merge_crosswalk\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__inst_merge_crosswalk"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.b753ea2cc5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_merge_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.b753ea2cc5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_merge_crosswalk_claim_id", "alias": "not_null_claims_preprocessing__inst_merge_crosswalk_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3463001, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.inst_merge_crosswalk\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__inst_merge_crosswalk"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_a.6e2314bd2f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id_a", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_merge_stage_claim_id_a"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_a.6e2314bd2f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__inst_merge_stage_claim_id_a.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_merge_stage_claim_id_a", "alias": "unique_claims_preprocessing__inst_merge_stage_claim_id_a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__inst_merge_stage_claim_id_a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3485687, "compiled_code": "\n    \n    \n\nselect\n    claim_id_a as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_merge_stage\nwhere claim_id_a is not null\ngroup by claim_id_a\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id_a", "file_key_name": "models.claims_preprocessing__inst_merge_stage"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_a.5877b04c5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id_a", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_merge_stage_claim_id_a"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_a.5877b04c5a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__inst_merge_stage_claim_id_a.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_merge_stage_claim_id_a", "alias": "not_null_claims_preprocessing__inst_merge_stage_claim_id_a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__inst_merge_stage_claim_id_a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3503065, "compiled_code": "\n    \n    \n\n\n\nselect claim_id_a\nfrom tuva.core.inst_merge_stage\nwhere claim_id_a is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id_a", "file_key_name": "models.claims_preprocessing__inst_merge_stage"}, "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_b.4c27db8666": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id_b", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__inst_merge_stage_claim_id_b"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_b.4c27db8666", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__inst_merge_stage_claim_id_b.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__inst_merge_stage_claim_id_b", "alias": "unique_claims_preprocessing__inst_merge_stage_claim_id_b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__inst_merge_stage_claim_id_b.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3523967, "compiled_code": "\n    \n    \n\nselect\n    claim_id_b as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.inst_merge_stage\nwhere claim_id_b is not null\ngroup by claim_id_b\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id_b", "file_key_name": "models.claims_preprocessing__inst_merge_stage"}, "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_b.2a9b4ac5a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id_b", "model": "{{ get_where_subquery(ref('claims_preprocessing__inst_merge_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__inst_merge_stage_claim_id_b"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_b.2a9b4ac5a2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__inst_merge_stage_claim_id_b.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__inst_merge_stage_claim_id_b", "alias": "not_null_claims_preprocessing__inst_merge_stage_claim_id_b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__inst_merge_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__inst_merge_stage_claim_id_b.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3541634, "compiled_code": "\n    \n    \n\n\n\nselect claim_id_b\nfrom tuva.core.inst_merge_stage\nwhere claim_id_b is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id_b", "file_key_name": "models.claims_preprocessing__inst_merge_stage"}, "test.claims_preprocessing.unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.11c21ff8eb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__prof_inst_encounter_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.11c21ff8eb", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id", "alias": "unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__prof_inst_encounter_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__p_17b0d9866c856b5eef8b37ea5373583c"}, "created_at": 1668635368.356096, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.prof_inst_encounter_crosswalk\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__prof_inst_encounter_crosswalk"}, "test.claims_preprocessing.not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.59e3b6cd53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__prof_inst_encounter_crosswalk')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk"]}, "config": {"enabled": true, "alias": "not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.59e3b6cd53", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id", "alias": "not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__prof_inst_encounter_crosswalk"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "not_null_claims_preprocessing__9e9a705d229c8f61eccab064de275b4a"}, "created_at": 1668635368.3579304, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.prof_inst_encounter_crosswalk\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__prof_inst_encounter_crosswalk"}, "test.claims_preprocessing.unique_claims_preprocessing__prof_merge_final_claim_id.6537b841eb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__prof_merge_final')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__prof_merge_final"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__prof_merge_final_claim_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__prof_merge_final_claim_id.6537b841eb", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__prof_merge_final_claim_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__prof_merge_final_claim_id", "alias": "unique_claims_preprocessing__prof_merge_final_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__prof_merge_final"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__prof_merge_final_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3600078, "compiled_code": "\n    \n    \n\nselect\n    claim_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.prof_merge_final\nwhere claim_id is not null\ngroup by claim_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__prof_merge_final"}, "test.claims_preprocessing.not_null_claims_preprocessing__prof_merge_final_claim_id.2efd03b835": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "claim_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__prof_merge_final')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__prof_merge_final"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__prof_merge_final_claim_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__prof_merge_final_claim_id.2efd03b835", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__prof_merge_final_claim_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__prof_merge_final_claim_id", "alias": "not_null_claims_preprocessing__prof_merge_final_claim_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__prof_merge_final"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__prof_merge_final_claim_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3617487, "compiled_code": "\n    \n    \n\n\n\nselect claim_id\nfrom tuva.core.prof_merge_final\nwhere claim_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "claim_id", "file_key_name": "models.claims_preprocessing__prof_merge_final"}, "test.claims_preprocessing.unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_.143d24ca22": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(encounter_id || patient_id || condition_date || code || diagnosis_rank || present_on_admit_code)", "model": "{{ get_where_subquery(ref('claims_preprocessing__condition')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__condition"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_.143d24ca22", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_", "alias": "unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__condition"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__c_c369cfbc0a60aa1ea1def608a26ffdb0"}, "created_at": 1668635368.364144, "compiled_code": "\n    \n    \n\nselect\n    (encounter_id || patient_id || condition_date || code || diagnosis_rank || present_on_admit_code) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.condition\nwhere (encounter_id || patient_id || condition_date || code || diagnosis_rank || present_on_admit_code) is not null\ngroup by (encounter_id || patient_id || condition_date || code || diagnosis_rank || present_on_admit_code)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__condition"}, "test.claims_preprocessing.unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_.c243daa64a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || member_id || payer || payer_type || enrollment_start_date || enrollment_end_date)", "model": "{{ get_where_subquery(ref('claims_preprocessing__eligibility')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__eligibility"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_.c243daa64a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_", "alias": "unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__eligibility"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "alias": "unique_claims_preprocessing__e_ee889fd2cb442f5d5cf4dd90a2faef75"}, "created_at": 1668635368.366654, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || member_id || payer || payer_type || enrollment_start_date || enrollment_end_date) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.eligibility\nwhere (patient_id || member_id || payer || payer_type || enrollment_start_date || enrollment_end_date) is not null\ngroup by (patient_id || member_id || payer || payer_type || enrollment_start_date || enrollment_end_date)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__eligibility"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_encounter_id.1ccf2700da": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_encounter_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_encounter_id.1ccf2700da", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__encounter_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_encounter_id", "alias": "unique_claims_preprocessing__encounter_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__encounter_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3684962, "compiled_code": "\n    \n    \n\nselect\n    encounter_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter\nwhere encounter_id is not null\ngroup by encounter_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter"}, "test.claims_preprocessing.not_null_claims_preprocessing__encounter_encounter_id.9e847e2451": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__encounter_encounter_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__encounter_encounter_id.9e847e2451", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__encounter_encounter_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__encounter_encounter_id", "alias": "not_null_claims_preprocessing__encounter_encounter_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__encounter_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.370257, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.core.encounter\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.claims_preprocessing__encounter"}, "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_.12e2284cc8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id || '_' || claim_line_number)", "model": "{{ get_where_subquery(ref('claims_preprocessing__encounter_claim_line')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_.12e2284cc8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_", "alias": "unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__encounter_claim_line"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__e_4083ca817d411a10304f8bba0942f19b"}, "created_at": 1668635368.3722632, "compiled_code": "\n    \n    \n\nselect\n    (claim_id || '_' || claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.encounter_claim_line\nwhere (claim_id || '_' || claim_line_number) is not null\ngroup by (claim_id || '_' || claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__encounter_claim_line"}, "test.claims_preprocessing.unique_claims_preprocessing__patient_patient_id.bf97d4f068": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__patient')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__patient"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__patient_patient_id"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__patient_patient_id.bf97d4f068", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__patient_patient_id.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__patient_patient_id", "alias": "unique_claims_preprocessing__patient_patient_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__patient"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__patient_patient_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3741546, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.patient\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.claims_preprocessing__patient"}, "test.claims_preprocessing.not_null_claims_preprocessing__patient_patient_id.77471ed9a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('claims_preprocessing__patient')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__patient"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "not_null_claims_preprocessing__patient_patient_id"], "unique_id": "test.claims_preprocessing.not_null_claims_preprocessing__patient_patient_id.77471ed9a5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "not_null_claims_preprocessing__patient_patient_id.sql", "original_file_path": "models/_models.yml", "name": "not_null_claims_preprocessing__patient_patient_id", "alias": "not_null_claims_preprocessing__patient_patient_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__patient"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/not_null_claims_preprocessing__patient_patient_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1668635368.3759007, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.core.patient\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.claims_preprocessing__patient"}, "test.claims_preprocessing.unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_.868110f37f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(encounter_id || patient_id || procedure_date || code)", "model": "{{ get_where_subquery(ref('claims_preprocessing__procedure')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.claims_preprocessing.claims_preprocessing__procedure"]}, "config": {"enabled": true, "alias": "unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "syntegra_synthetic_sample", "schema": "dbt_test__audit", "fqn": ["claims_preprocessing", "unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_"], "unique_id": "test.claims_preprocessing.unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_.868110f37f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417\") }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417.sql", "original_file_path": "models/_models.yml", "name": "unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_", "alias": "unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["claims_preprocessing__procedure"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/claims_preprocessing/models/_models.yml/unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "unique_claims_preprocessing__p_e73dfc16a914380f8065ccca1182c417"}, "created_at": 1668635368.3776486, "compiled_code": "\n    \n    \n\nselect\n    (encounter_id || patient_id || procedure_date || code) as unique_field,\n    count(*) as n_records\n\nfrom tuva.core.procedure\nwhere (encounter_id || patient_id || procedure_date || code) is not null\ngroup by (encounter_id || patient_id || procedure_date || code)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.claims_preprocessing__procedure"}}, "sources": {"source.claims_preprocessing.claims_input.medical_claim": {"fqn": ["claims_preprocessing", "claims_input", "medical_claim"], "database": "tuva", "schema": "claims_input", "unique_id": "source.claims_preprocessing.claims_input.medical_claim", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "medical_claim", "source_name": "claims_input", "source_description": "", "loader": "", "identifier": "medical_claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.medical_claim", "created_at": 1668635368.7530456}, "source.claims_preprocessing.claims_input.eligibility": {"fqn": ["claims_preprocessing", "claims_input", "eligibility"], "database": "tuva", "schema": "claims_input", "unique_id": "source.claims_preprocessing.claims_input.eligibility", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "eligibility", "source_name": "claims_input", "source_description": "", "loader": "", "identifier": "eligibility", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.eligibility", "created_at": 1668635368.7532222}, "source.claims_preprocessing.claims_input.pharmacy_claim": {"fqn": ["claims_preprocessing", "claims_input", "pharmacy_claim"], "database": "tuva", "schema": "claims_input", "unique_id": "source.claims_preprocessing.claims_input.pharmacy_claim", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "name": "pharmacy_claim", "source_name": "claims_input", "source_description": "", "loader": "", "identifier": "pharmacy_claim", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "tuva.claims_input.pharmacy_claim", "created_at": 1668635368.753342}}, "macros": {"macro.claims_preprocessing.generate_schema_name": {"unique_id": "macro.claims_preprocessing.generate_schema_name", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {{ custom_schema_name }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1065369, "supported_languages": null}, "macro.claims_preprocessing.test_inst_facility_npi": {"unique_id": "macro.claims_preprocessing.test_inst_facility_npi", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/inst_facility_npi.sql", "original_file_path": "tests/generic/inst_facility_npi.sql", "name": "test_inst_facility_npi", "macro_sql": "{% test inst_facility_npi(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/**  Returns rows if institutional claims have a null facility npi  **/\r\n\r\nselect {{ column_name }}\r\nfrom {{ model }}\r\nwhere claim_type = 'institutional'\r\nand nullif(facility_npi,'') is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.108187, "supported_languages": null}, "macro.claims_preprocessing.test_inst_bill_type_code": {"unique_id": "macro.claims_preprocessing.test_inst_bill_type_code", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/inst_bill_type_code.sql", "original_file_path": "tests/generic/inst_bill_type_code.sql", "name": "test_inst_bill_type_code", "macro_sql": "{% test inst_bill_type_code(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/**  Returns rows if institutional claims have a null bill type code  **/\r\n\r\nselect {{ column_name }}\r\nfrom {{ model }}\r\nwhere claim_type = 'institutional'\r\nand nullif(bill_type_code,'') is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1091847, "supported_languages": null}, "macro.claims_preprocessing.test_encounter_type_mapping": {"unique_id": "macro.claims_preprocessing.test_encounter_type_mapping", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/encounter_type_mapping.sql", "original_file_path": "tests/generic/encounter_type_mapping.sql", "name": "test_encounter_type_mapping", "macro_sql": "{% test encounter_type_mapping(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/** Returns rows if encounter type mapping does not exist in seed file\r\n    Used custom test to account for unmapped rows.  Do not want to add them to the seed and test passes if they exist.   **/\r\n\r\nselect m.{{ column_name }}\r\nfrom {{ model }} m\r\nleft join {{ ref('terminology__encounter_type')}} e\r\n    on e.encounter_type = m.encounter_type\r\nwhere m.encounter_type <> 'unmapped'\r\nand e.encounter_type is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1102738, "supported_languages": null}, "macro.claims_preprocessing.test_inst_discharge_disposition_code": {"unique_id": "macro.claims_preprocessing.test_inst_discharge_disposition_code", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/inst_discharge_disposition_code.sql", "original_file_path": "tests/generic/inst_discharge_disposition_code.sql", "name": "test_inst_discharge_disposition_code", "macro_sql": "{% test inst_discharge_disposition_code(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/**  Returns rows if institutional claims have a null discharge disposition code  **/\r\n\r\nselect {{ column_name }}\r\nfrom {{ model }}\r\nwhere claim_type = 'institutional'\r\nand nullif(discharge_disposition_code,'') is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1111896, "supported_languages": null}, "macro.claims_preprocessing.test_prof_place_of_service_code": {"unique_id": "macro.claims_preprocessing.test_prof_place_of_service_code", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/prof_place_of_service_code.sql", "original_file_path": "tests/generic/prof_place_of_service_code.sql", "name": "test_prof_place_of_service_code", "macro_sql": "{% test prof_place_of_service_code(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/**  Returns rows if profession claims have a null place of service  **/\r\n\r\nselect {{ column_name }}\r\nfrom {{ model }}\r\nwhere claim_type = 'professional'\r\nand nullif(place_of_service_code,'') is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1121442, "supported_languages": null}, "macro.claims_preprocessing.test_inst_revenue_center_code": {"unique_id": "macro.claims_preprocessing.test_inst_revenue_center_code", "package_name": "claims_preprocessing", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726", "path": "tests/generic/inst_revenue_center_code.sql", "original_file_path": "tests/generic/inst_revenue_center_code.sql", "name": "test_inst_revenue_center_code", "macro_sql": "{% test inst_revenue_center_code(model, column_name) %}\r\n{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n/**  Returns rows if institutional claims have a null revenue center code  **/\r\n\r\nselect {{ column_name }}\r\nfrom {{ model }}\r\nwhere claim_type = 'institutional'\r\nand nullif(revenue_center_code,'') is null\r\n\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.11307, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1139073, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1141777, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.116079, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1384125, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.140005, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1406426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1422558, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.143932, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.145141, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1462405, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.146942, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.147378, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1479564, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1484113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1495194, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1499324, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1502976, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1513321, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1517696, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1528337, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1544466, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1549432, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.155495, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1601748, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1608598, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1637166, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1704867, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.170873, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1719127, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1729062, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.175334, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1759775, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1765351, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1811748, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.181654, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.181875, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1831923, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1838264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.184396, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1849842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1857083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.186112, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1863613, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1866014, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1869032, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1876073, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.188134, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1913912, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1926644, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1933305, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1965578, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.1992304, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2008896, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2014139, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.204464, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2047362, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2051182, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2053752, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2061236, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2065332, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2067702, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2072535, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2076933, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.208191, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2086382, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2091513, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2106454, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2114494, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2120848, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.212595, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.214989, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2161636, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2170858, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2200773, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2204342, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2211394, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2215517, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2222807, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.222774, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.224065, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2246258, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2263284, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2275088, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2278764, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.228205, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2284536, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2288346, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2290215, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2293842, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.229756, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.235379, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2360387, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.23666, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2373285, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2378674, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.238562, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.238973, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2394547, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.239894, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2402716, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2407188, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2413468, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.241884, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2430727, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.243599, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2439392, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.244375, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2454467, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2458644, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2462223, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2466347, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2481425, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.248531, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2489867, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.249368, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2501209, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2511473, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.253897, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2544804, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.254892, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2552443, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2556937, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.256251, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2566993, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2573776, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2577984, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2581644, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.259307, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2596664, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2600322, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2609148, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2619338, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2624943, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.26368, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2642753, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2649028, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2658505, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2663574, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.269248, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2702668, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2712462, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2721372, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.272317, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.29239, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2928522, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2931924, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2935174, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2938404, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2947824, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.295455, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.2961586, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3026493, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3102658, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3122547, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3127768, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3138154, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3142369, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3145385, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3148503, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3151114, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3154588, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3157487, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3167706, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3171906, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3199131, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3244216, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3255637, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3262298, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3271673, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.328044, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3288653, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3293557, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3325145, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3334482, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3338125, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3342104, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3347714, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3399456, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3417065, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3422143, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.342627, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3431866, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3436177, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.344192, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3446102, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3451853, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3455973, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.345931, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3465223, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3495483, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3507423, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.352175, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3526886, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3542771, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.364075, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.372709, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3754814, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.378137, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3799796, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3815606, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3896427, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.393069, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3936052, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3951755, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.395778, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3971446, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3984213, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3988292, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.3998263, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4007275, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4059844, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4122095, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4125948, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4131021, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4145746, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.414934, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4153075, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4182024, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4210289, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4221196, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4226947, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4335682, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.439806, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4404304, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4408169, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.44103, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4413548, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4416218, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4420638, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4438891, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4443095, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.444864, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4457839, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4466572, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.44753, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4482636, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4496074, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4502866, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4504745, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4512959, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4516318, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4523861, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.452706, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4536586, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4539833, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4549232, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4554548, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4561863, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.456542, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4574156, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4577854, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4584894, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.458769, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4594846, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4597566, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4605162, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4607682, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4626853, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.463027, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4633808, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4637384, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4640968, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.464429, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4647763, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4651742, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4659443, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4662924, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4666483, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4669693, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4673252, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4676678, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4684389, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.46874, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4695494, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4698641, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4706302, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.470935, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.471828, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4724016, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.472731, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4738827, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4742541, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4747324, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.475493, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.475816, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.476523, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.476768, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4775074, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4780223, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.478701, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.478887, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4796128, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.479865, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.480737, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4811323, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.482014, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4823852, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4837358, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4846113, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4857924, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4862998, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.486934, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4875412, "supported_languages": null}, "macro.terminology.generate_schema_name": {"unique_id": "macro.terminology.generate_schema_name", "package_name": "terminology", "root_path": "/usr/src/develop/user-63089/environment-103719/repository-83726/dbt_packages/terminology", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- set target_name = target.name -%}\n\n    {%- if custom_schema_name is not none -%}\n\n       {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668635367.4886036, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.claims_preprocessing.claims_preprocessing__prescription": ["source.claims_preprocessing.claims_input.pharmacy_claim"], "model.claims_preprocessing.claims_preprocessing__procedure": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "seed.terminology.terminology__icd_10_pcs"], "model.claims_preprocessing.claims_preprocessing__patient": ["source.claims_preprocessing.claims_input.eligibility"], "model.claims_preprocessing.claims_preprocessing__encounter": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage", "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_line": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "model.claims_preprocessing.claims_preprocessing__condition": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["seed.terminology.terminology__medicare_dual_eligibility", "seed.terminology.terminology__medicare_status", "source.claims_preprocessing.claims_input.eligibility"], "model.claims_preprocessing.claims_preprocessing__encounter_type_union": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim"], "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter": ["seed.terminology.terminology__place_of_service", "seed.terminology.terminology__revenue_center", "seed.terminology.terminology__revenue_center", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim"], "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter": ["seed.terminology.terminology__ms_drg", "seed.terminology.terminology__place_of_service", "seed.terminology.terminology__revenue_center", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim"], "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "source.claims_preprocessing.claims_input.medical_claim", "source.claims_preprocessing.claims_input.medical_claim"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_merge_final"], "model.claims_preprocessing.claims_preprocessing__inst_merge_stage": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg", "seed.terminology.terminology__place_of_service", "seed.terminology.terminology__revenue_center", "source.claims_preprocessing.claims_input.medical_claim"], "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_encounter_final"], "model.claims_preprocessing.claims_preprocessing__inst_merge_final": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage", "model.claims_preprocessing.claims_preprocessing__inst_merge_stage"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_final": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"], "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk": ["model.claims_preprocessing.claims_preprocessing__inst_merge_final", "model.claims_preprocessing.claims_preprocessing__inst_merge_final"], "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "model.claims_preprocessing.claims_preprocessing__prof_merge_final": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"], "seed.terminology.terminology__icd_10_cm": [], "seed.terminology.terminology__admit_source": [], "seed.terminology.terminology__chronic_conditions": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__present_on_admission": [], "seed.terminology.terminology__race": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__icd_10_pcs": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__admit_type": [], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__ms_drg": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__discharge_disposition": [], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__surgery_gynecology_cohort": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.da3d8a2326": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id.bf4520c954": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_.b81efd67bb": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_inst_stage_encounter_id.759ef63e91": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_inst_stage_encounter_id.707de22a1a": ["model.claims_preprocessing.claims_preprocessing__encounter_inst_stage"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_prof_stage_encounter_id.e2960bbf6e": ["model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_prof_stage_encounter_id.108aa7014a": ["model.claims_preprocessing.claims_preprocessing__encounter_prof_stage"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_line_number.a8061ea4ec": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_type.a3148fba07": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision.ec2f91a13e": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_id.121e549d58": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_patient_id.9d4c2941f0": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "seed.terminology.terminology__encounter_type"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_start_date.72c1c09589": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_end_date.01f42c5f2c": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi.ee282d4083": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code.77c1f1ad54": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_.3363ce66ca": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_union_claim_id.89a48a5bfe": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_union_claim_id.8991791277": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_final_encounter_id.f019334260": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_final_encounter_id.f81a2fda92": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final"], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_merge_encounter_id.2d88d56000": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_merge_encounter_id.60619a7da4": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_merge"], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id.bec8fd90a3": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id.1ed89c17bb": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge"], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_crosswalk_claim_id.c2ac7f0d8f": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.b753ea2cc5": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_a.6e2314bd2f": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_a.5877b04c5a": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_b.4c27db8666": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_b.2a9b4ac5a2": ["model.claims_preprocessing.claims_preprocessing__inst_merge_stage"], "test.claims_preprocessing.unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.11c21ff8eb": ["model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk"], "test.claims_preprocessing.not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.59e3b6cd53": ["model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk"], "test.claims_preprocessing.unique_claims_preprocessing__prof_merge_final_claim_id.6537b841eb": ["model.claims_preprocessing.claims_preprocessing__prof_merge_final"], "test.claims_preprocessing.not_null_claims_preprocessing__prof_merge_final_claim_id.2efd03b835": ["model.claims_preprocessing.claims_preprocessing__prof_merge_final"], "test.claims_preprocessing.unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_.143d24ca22": ["model.claims_preprocessing.claims_preprocessing__condition"], "test.claims_preprocessing.unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_.c243daa64a": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_encounter_id.1ccf2700da": ["model.claims_preprocessing.claims_preprocessing__encounter"], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_encounter_id.9e847e2451": ["model.claims_preprocessing.claims_preprocessing__encounter"], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_.12e2284cc8": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line"], "test.claims_preprocessing.unique_claims_preprocessing__patient_patient_id.bf97d4f068": ["model.claims_preprocessing.claims_preprocessing__patient"], "test.claims_preprocessing.not_null_claims_preprocessing__patient_patient_id.77471ed9a5": ["model.claims_preprocessing.claims_preprocessing__patient"], "test.claims_preprocessing.unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_.868110f37f": ["model.claims_preprocessing.claims_preprocessing__procedure"], "source.claims_preprocessing.claims_input.medical_claim": [], "source.claims_preprocessing.claims_input.eligibility": [], "source.claims_preprocessing.claims_input.pharmacy_claim": []}, "child_map": {"model.claims_preprocessing.claims_preprocessing__prescription": [], "model.claims_preprocessing.claims_preprocessing__procedure": ["test.claims_preprocessing.unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_.868110f37f"], "model.claims_preprocessing.claims_preprocessing__patient": ["test.claims_preprocessing.not_null_claims_preprocessing__patient_patient_id.77471ed9a5", "test.claims_preprocessing.unique_claims_preprocessing__patient_patient_id.bf97d4f068"], "model.claims_preprocessing.claims_preprocessing__encounter": ["test.claims_preprocessing.not_null_claims_preprocessing__encounter_encounter_id.9e847e2451", "test.claims_preprocessing.unique_claims_preprocessing__encounter_encounter_id.1ccf2700da"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_line": ["test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_.12e2284cc8"], "model.claims_preprocessing.claims_preprocessing__condition": ["test.claims_preprocessing.unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_.143d24ca22"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["test.claims_preprocessing.unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_.c243daa64a"], "model.claims_preprocessing.claims_preprocessing__encounter_type_union": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge", "model.claims_preprocessing.claims_preprocessing__inst_merge_stage", "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_union_claim_id.8991791277", "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_union_claim_id.89a48a5bfe"], "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter": ["model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping": ["model.claims_preprocessing.claims_preprocessing__encounter_type_union", "test.claims_preprocessing.accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision.ec2f91a13e", "test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d", "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code.77c1f1ad54", "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi.ee282d4083", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_end_date.01f42c5f2c", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_id.121e549d58", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_line_number.a8061ea4ec", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_start_date.72c1c09589", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_type.a3148fba07", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_patient_id.9d4c2941f0", "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_.3363ce66ca"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id.bf4520c954", "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.da3d8a2326"], "model.claims_preprocessing.claims_preprocessing__inst_merge_stage": ["model.claims_preprocessing.claims_preprocessing__inst_merge_final", "model.claims_preprocessing.claims_preprocessing__inst_merge_final", "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_a.5877b04c5a", "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_b.2a9b4ac5a2", "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_a.6e2314bd2f", "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_b.4c27db8666"], "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage": ["model.claims_preprocessing.claims_preprocessing__encounter", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_prof_stage_encounter_id.108aa7014a", "test.claims_preprocessing.unique_claims_preprocessing__encounter_prof_stage_encounter_id.e2960bbf6e"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__inst_encounter_final", "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id.1ed89c17bb", "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id.bec8fd90a3"], "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line", "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage", "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage", "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage", "model.claims_preprocessing.claims_preprocessing__encounter_prof_stage", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_.b81efd67bb"], "model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "model.claims_preprocessing.claims_preprocessing__prof_merge_final", "test.claims_preprocessing.not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.59e3b6cd53", "test.claims_preprocessing.unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.11c21ff8eb"], "model.claims_preprocessing.claims_preprocessing__inst_merge_final": ["model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk", "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_final": ["model.claims_preprocessing.claims_preprocessing__prof_inst_encounter_crosswalk", "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_final_encounter_id.f81a2fda92", "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_final_encounter_id.f019334260"], "model.claims_preprocessing.claims_preprocessing__inst_merge_crosswalk": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge", "model.claims_preprocessing.claims_preprocessing__inst_encounter_nonmerge", "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.b753ea2cc5", "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_crosswalk_claim_id.c2ac7f0d8f"], "model.claims_preprocessing.claims_preprocessing__encounter_inst_stage": ["model.claims_preprocessing.claims_preprocessing__encounter", "test.claims_preprocessing.not_null_claims_preprocessing__encounter_inst_stage_encounter_id.707de22a1a", "test.claims_preprocessing.unique_claims_preprocessing__encounter_inst_stage_encounter_id.759ef63e91"], "model.claims_preprocessing.claims_preprocessing__prof_merge_final": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "model.claims_preprocessing.claims_preprocessing__encounter_claim_crosswalk", "test.claims_preprocessing.not_null_claims_preprocessing__prof_merge_final_claim_id.2efd03b835", "test.claims_preprocessing.unique_claims_preprocessing__prof_merge_final_claim_id.6537b841eb"], "model.claims_preprocessing.claims_preprocessing__inst_encounter_merge": ["model.claims_preprocessing.claims_preprocessing__inst_encounter_final", "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_merge_encounter_id.60619a7da4", "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_merge_encounter_id.2d88d56000"], "seed.terminology.terminology__icd_10_cm": ["model.claims_preprocessing.claims_preprocessing__condition"], "seed.terminology.terminology__admit_source": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__chronic_conditions": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__present_on_admission": ["model.claims_preprocessing.claims_preprocessing__condition"], "seed.terminology.terminology__race": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__place_of_service": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__icd_10_pcs": ["model.claims_preprocessing.claims_preprocessing__procedure"], "seed.terminology.terminology__medicare_dual_eligibility": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "seed.terminology.terminology__medicare_status": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "seed.terminology.terminology__admit_type": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__encounter_type": ["test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d"], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__ms_drg": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__revenue_center": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__discharge_disposition": ["model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage"], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__surgery_gynecology_cohort": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_crosswalk_claim_id.da3d8a2326": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_claim_crosswalk_claim_id.bf4520c954": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line_stage__claim_id___claim_line_number_.b81efd67bb": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_inst_stage_encounter_id.759ef63e91": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_inst_stage_encounter_id.707de22a1a": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_prof_stage_encounter_id.e2960bbf6e": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_prof_stage_encounter_id.108aa7014a": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_line_number.a8061ea4ec": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_type.a3148fba07": [], "test.claims_preprocessing.accepted_values_claims_preprocessing__encounter_type_mapping_claim_type__dental__institutional__professional__vision.ec2f91a13e": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_id.121e549d58": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_patient_id.9d4c2941f0": [], "test.claims_preprocessing.encounter_type_mapping_claims_preprocessing__encounter_type_mapping_encounter_type.1eac975b8d": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_start_date.72c1c09589": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_mapping_claim_end_date.01f42c5f2c": [], "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_facility_npi.ee282d4083": [], "test.claims_preprocessing.inst_bill_type_code_claims_preprocessing__encounter_type_mapping_bill_type_code.77c1f1ad54": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_mapping__claim_id_claim_line_number_.3363ce66ca": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_type_union_claim_id.89a48a5bfe": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_type_union_claim_id.8991791277": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_final_encounter_id.f019334260": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_final_encounter_id.f81a2fda92": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_merge_encounter_id.2d88d56000": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_merge_encounter_id.60619a7da4": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_encounter_nonmerge_encounter_id.bec8fd90a3": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_encounter_nonmerge_encounter_id.1ed89c17bb": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_crosswalk_claim_id.c2ac7f0d8f": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_crosswalk_claim_id.b753ea2cc5": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_a.6e2314bd2f": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_a.5877b04c5a": [], "test.claims_preprocessing.unique_claims_preprocessing__inst_merge_stage_claim_id_b.4c27db8666": [], "test.claims_preprocessing.not_null_claims_preprocessing__inst_merge_stage_claim_id_b.2a9b4ac5a2": [], "test.claims_preprocessing.unique_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.11c21ff8eb": [], "test.claims_preprocessing.not_null_claims_preprocessing__prof_inst_encounter_crosswalk_claim_id.59e3b6cd53": [], "test.claims_preprocessing.unique_claims_preprocessing__prof_merge_final_claim_id.6537b841eb": [], "test.claims_preprocessing.not_null_claims_preprocessing__prof_merge_final_claim_id.2efd03b835": [], "test.claims_preprocessing.unique_claims_preprocessing__condition__encounter_id_patient_id_condition_date_code_diagnosis_rank_present_on_admit_code_.143d24ca22": [], "test.claims_preprocessing.unique_claims_preprocessing__eligibility__patient_id_member_id_payer_payer_type_enrollment_start_date_enrollment_end_date_.c243daa64a": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_encounter_id.1ccf2700da": [], "test.claims_preprocessing.not_null_claims_preprocessing__encounter_encounter_id.9e847e2451": [], "test.claims_preprocessing.unique_claims_preprocessing__encounter_claim_line__claim_id___claim_line_number_.12e2284cc8": [], "test.claims_preprocessing.unique_claims_preprocessing__patient_patient_id.bf97d4f068": [], "test.claims_preprocessing.not_null_claims_preprocessing__patient_patient_id.77471ed9a5": [], "test.claims_preprocessing.unique_claims_preprocessing__procedure__encounter_id_patient_id_procedure_date_code_.868110f37f": [], "source.claims_preprocessing.claims_input.medical_claim": ["model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__acute_inpatient_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__emergency_department_encounter", "model.claims_preprocessing.claims_preprocessing__encounter_claim_line_stage", "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "model.claims_preprocessing.claims_preprocessing__encounter_type_mapping", "model.claims_preprocessing.claims_preprocessing__encounter_type_union", "model.claims_preprocessing.claims_preprocessing__encounter_type_union"], "source.claims_preprocessing.claims_input.eligibility": ["model.claims_preprocessing.claims_preprocessing__eligibility", "model.claims_preprocessing.claims_preprocessing__patient"], "source.claims_preprocessing.claims_input.pharmacy_claim": ["model.claims_preprocessing.claims_preprocessing__prescription"]}}